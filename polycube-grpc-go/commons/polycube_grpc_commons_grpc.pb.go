// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package commons

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolycubeClient is the client API for Polycube service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolycubeClient interface {
	//
	//====================================================================================================
	//SERVICE MANAGEMENT CALLS
	//====================================================================================================
	Unsubscribe(ctx context.Context, in *ServicedInfo, opts ...grpc.CallOption) (*Bool, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Polycube_SubscribeClient, error)
	//
	//====================================================================================================
	//CUBE MANAGEMENT CALLS
	//====================================================================================================
	Reload(ctx context.Context, in *Dataplane, opts ...grpc.CallOption) (*Empty, error)
	DestroyCube(ctx context.Context, in *CubeManagement, opts ...grpc.CallOption) (*Bool, error)
	CreateCube(ctx context.Context, in *CubeManagement, opts ...grpc.CallOption) (*Bool, error)
	//
	//====================================================================================================
	//TODO OR MAYBE TODO
	//====================================================================================================
	SimpleUnaryMethod(ctx context.Context, in *ToPolycubed, opts ...grpc.CallOption) (*ToServiced, error)
	// https://www.bouncybouncy.net/blog/bpf_map_get_next_key-pitfalls/
	TableSet(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error)
	TableGetAll(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*MapValue, error)
	TableGet(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*MapValue, error)
	TableRemove(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error)
	TableRemoveAll(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error)
	//
	//====================================================================================================
	//PORT MANAGEMENT CALLS
	//====================================================================================================
	SetPort(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error)
	DelPort(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error)
	SetPeer(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error)
}

type polycubeClient struct {
	cc grpc.ClientConnInterface
}

func NewPolycubeClient(cc grpc.ClientConnInterface) PolycubeClient {
	return &polycubeClient{cc}
}

func (c *polycubeClient) Unsubscribe(ctx context.Context, in *ServicedInfo, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Polycube_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Polycube_ServiceDesc.Streams[0], "/commons.Polycube/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &polycubeSubscribeClient{stream}
	return x, nil
}

type Polycube_SubscribeClient interface {
	Send(*ToPolycubed) error
	Recv() (*ToServiced, error)
	grpc.ClientStream
}

type polycubeSubscribeClient struct {
	grpc.ClientStream
}

func (x *polycubeSubscribeClient) Send(m *ToPolycubed) error {
	return x.ClientStream.SendMsg(m)
}

func (x *polycubeSubscribeClient) Recv() (*ToServiced, error) {
	m := new(ToServiced)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polycubeClient) Reload(ctx context.Context, in *Dataplane, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/commons.Polycube/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) DestroyCube(ctx context.Context, in *CubeManagement, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/DestroyCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) CreateCube(ctx context.Context, in *CubeManagement, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/CreateCube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) SimpleUnaryMethod(ctx context.Context, in *ToPolycubed, opts ...grpc.CallOption) (*ToServiced, error) {
	out := new(ToServiced)
	err := c.cc.Invoke(ctx, "/commons.Polycube/SimpleUnaryMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) TableSet(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/TableSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) TableGetAll(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*MapValue, error) {
	out := new(MapValue)
	err := c.cc.Invoke(ctx, "/commons.Polycube/TableGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) TableGet(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*MapValue, error) {
	out := new(MapValue)
	err := c.cc.Invoke(ctx, "/commons.Polycube/TableGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) TableRemove(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/TableRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) TableRemoveAll(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/TableRemoveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) SetPort(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/SetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) DelPort(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/DelPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polycubeClient) SetPeer(ctx context.Context, in *ServicedToDataplaneRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/commons.Polycube/SetPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolycubeServer is the server API for Polycube service.
// All implementations must embed UnimplementedPolycubeServer
// for forward compatibility
type PolycubeServer interface {
	//
	//====================================================================================================
	//SERVICE MANAGEMENT CALLS
	//====================================================================================================
	Unsubscribe(context.Context, *ServicedInfo) (*Bool, error)
	Subscribe(Polycube_SubscribeServer) error
	//
	//====================================================================================================
	//CUBE MANAGEMENT CALLS
	//====================================================================================================
	Reload(context.Context, *Dataplane) (*Empty, error)
	DestroyCube(context.Context, *CubeManagement) (*Bool, error)
	CreateCube(context.Context, *CubeManagement) (*Bool, error)
	//
	//====================================================================================================
	//TODO OR MAYBE TODO
	//====================================================================================================
	SimpleUnaryMethod(context.Context, *ToPolycubed) (*ToServiced, error)
	// https://www.bouncybouncy.net/blog/bpf_map_get_next_key-pitfalls/
	TableSet(context.Context, *ServicedToDataplaneRequest) (*Bool, error)
	TableGetAll(context.Context, *ServicedToDataplaneRequest) (*MapValue, error)
	TableGet(context.Context, *ServicedToDataplaneRequest) (*MapValue, error)
	TableRemove(context.Context, *ServicedToDataplaneRequest) (*Bool, error)
	TableRemoveAll(context.Context, *ServicedToDataplaneRequest) (*Bool, error)
	//
	//====================================================================================================
	//PORT MANAGEMENT CALLS
	//====================================================================================================
	SetPort(context.Context, *ServicedToDataplaneRequest) (*Bool, error)
	DelPort(context.Context, *ServicedToDataplaneRequest) (*Bool, error)
	SetPeer(context.Context, *ServicedToDataplaneRequest) (*Bool, error)
	mustEmbedUnimplementedPolycubeServer()
}

// UnimplementedPolycubeServer must be embedded to have forward compatible implementations.
type UnimplementedPolycubeServer struct {
}

func (UnimplementedPolycubeServer) Unsubscribe(context.Context, *ServicedInfo) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedPolycubeServer) Subscribe(Polycube_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPolycubeServer) Reload(context.Context, *Dataplane) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedPolycubeServer) DestroyCube(context.Context, *CubeManagement) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCube not implemented")
}
func (UnimplementedPolycubeServer) CreateCube(context.Context, *CubeManagement) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCube not implemented")
}
func (UnimplementedPolycubeServer) SimpleUnaryMethod(context.Context, *ToPolycubed) (*ToServiced, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleUnaryMethod not implemented")
}
func (UnimplementedPolycubeServer) TableSet(context.Context, *ServicedToDataplaneRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableSet not implemented")
}
func (UnimplementedPolycubeServer) TableGetAll(context.Context, *ServicedToDataplaneRequest) (*MapValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableGetAll not implemented")
}
func (UnimplementedPolycubeServer) TableGet(context.Context, *ServicedToDataplaneRequest) (*MapValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableGet not implemented")
}
func (UnimplementedPolycubeServer) TableRemove(context.Context, *ServicedToDataplaneRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableRemove not implemented")
}
func (UnimplementedPolycubeServer) TableRemoveAll(context.Context, *ServicedToDataplaneRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableRemoveAll not implemented")
}
func (UnimplementedPolycubeServer) SetPort(context.Context, *ServicedToDataplaneRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPort not implemented")
}
func (UnimplementedPolycubeServer) DelPort(context.Context, *ServicedToDataplaneRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPort not implemented")
}
func (UnimplementedPolycubeServer) SetPeer(context.Context, *ServicedToDataplaneRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPeer not implemented")
}
func (UnimplementedPolycubeServer) mustEmbedUnimplementedPolycubeServer() {}

// UnsafePolycubeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolycubeServer will
// result in compilation errors.
type UnsafePolycubeServer interface {
	mustEmbedUnimplementedPolycubeServer()
}

func RegisterPolycubeServer(s grpc.ServiceRegistrar, srv PolycubeServer) {
	s.RegisterService(&Polycube_ServiceDesc, srv)
}

func _Polycube_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).Unsubscribe(ctx, req.(*ServicedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PolycubeServer).Subscribe(&polycubeSubscribeServer{stream})
}

type Polycube_SubscribeServer interface {
	Send(*ToServiced) error
	Recv() (*ToPolycubed, error)
	grpc.ServerStream
}

type polycubeSubscribeServer struct {
	grpc.ServerStream
}

func (x *polycubeSubscribeServer) Send(m *ToServiced) error {
	return x.ServerStream.SendMsg(m)
}

func (x *polycubeSubscribeServer) Recv() (*ToPolycubed, error) {
	m := new(ToPolycubed)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Polycube_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dataplane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).Reload(ctx, req.(*Dataplane))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_DestroyCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CubeManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).DestroyCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/DestroyCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).DestroyCube(ctx, req.(*CubeManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_CreateCube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CubeManagement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).CreateCube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/CreateCube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).CreateCube(ctx, req.(*CubeManagement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_SimpleUnaryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToPolycubed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).SimpleUnaryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/SimpleUnaryMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).SimpleUnaryMethod(ctx, req.(*ToPolycubed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_TableSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).TableSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/TableSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).TableSet(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_TableGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).TableGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/TableGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).TableGetAll(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_TableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).TableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/TableGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).TableGet(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_TableRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).TableRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/TableRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).TableRemove(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_TableRemoveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).TableRemoveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/TableRemoveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).TableRemoveAll(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_SetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).SetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/SetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).SetPort(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_DelPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).DelPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/DelPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).DelPort(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polycube_SetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicedToDataplaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolycubeServer).SetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commons.Polycube/SetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolycubeServer).SetPeer(ctx, req.(*ServicedToDataplaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Polycube_ServiceDesc is the grpc.ServiceDesc for Polycube service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Polycube_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commons.Polycube",
	HandlerType: (*PolycubeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unsubscribe",
			Handler:    _Polycube_Unsubscribe_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Polycube_Reload_Handler,
		},
		{
			MethodName: "DestroyCube",
			Handler:    _Polycube_DestroyCube_Handler,
		},
		{
			MethodName: "CreateCube",
			Handler:    _Polycube_CreateCube_Handler,
		},
		{
			MethodName: "SimpleUnaryMethod",
			Handler:    _Polycube_SimpleUnaryMethod_Handler,
		},
		{
			MethodName: "TableSet",
			Handler:    _Polycube_TableSet_Handler,
		},
		{
			MethodName: "TableGetAll",
			Handler:    _Polycube_TableGetAll_Handler,
		},
		{
			MethodName: "TableGet",
			Handler:    _Polycube_TableGet_Handler,
		},
		{
			MethodName: "TableRemove",
			Handler:    _Polycube_TableRemove_Handler,
		},
		{
			MethodName: "TableRemoveAll",
			Handler:    _Polycube_TableRemoveAll_Handler,
		},
		{
			MethodName: "SetPort",
			Handler:    _Polycube_SetPort_Handler,
		},
		{
			MethodName: "DelPort",
			Handler:    _Polycube_DelPort_Handler,
		},
		{
			MethodName: "SetPeer",
			Handler:    _Polycube_SetPeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Polycube_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "polycube_grpc_commons.proto",
}
