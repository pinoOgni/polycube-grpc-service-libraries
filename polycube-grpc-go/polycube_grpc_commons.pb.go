// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: polycube_grpc_commons.proto

package polycube_grpc_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServicedInfo_ServiceType int32

const (
	ServicedInfo_STANDARD    ServicedInfo_ServiceType = 0
	ServicedInfo_TRANSPARENT ServicedInfo_ServiceType = 1
)

// Enum value maps for ServicedInfo_ServiceType.
var (
	ServicedInfo_ServiceType_name = map[int32]string{
		0: "STANDARD",
		1: "TRANSPARENT",
	}
	ServicedInfo_ServiceType_value = map[string]int32{
		"STANDARD":    0,
		"TRANSPARENT": 1,
	}
)

func (x ServicedInfo_ServiceType) Enum() *ServicedInfo_ServiceType {
	p := new(ServicedInfo_ServiceType)
	*p = x
	return p
}

func (x ServicedInfo_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicedInfo_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_polycube_grpc_commons_proto_enumTypes[0].Descriptor()
}

func (ServicedInfo_ServiceType) Type() protoreflect.EnumType {
	return &file_polycube_grpc_commons_proto_enumTypes[0]
}

func (x ServicedInfo_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicedInfo_ServiceType.Descriptor instead.
func (ServicedInfo_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{2, 0}
}

type CubeInfo_ProgramType int32

const (
	CubeInfo_INGRESS CubeInfo_ProgramType = 0
	CubeInfo_EGRESS  CubeInfo_ProgramType = 1
)

// Enum value maps for CubeInfo_ProgramType.
var (
	CubeInfo_ProgramType_name = map[int32]string{
		0: "INGRESS",
		1: "EGRESS",
	}
	CubeInfo_ProgramType_value = map[string]int32{
		"INGRESS": 0,
		"EGRESS":  1,
	}
)

func (x CubeInfo_ProgramType) Enum() *CubeInfo_ProgramType {
	p := new(CubeInfo_ProgramType)
	*p = x
	return p
}

func (x CubeInfo_ProgramType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CubeInfo_ProgramType) Descriptor() protoreflect.EnumDescriptor {
	return file_polycube_grpc_commons_proto_enumTypes[1].Descriptor()
}

func (CubeInfo_ProgramType) Type() protoreflect.EnumType {
	return &file_polycube_grpc_commons_proto_enumTypes[1]
}

func (x CubeInfo_ProgramType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CubeInfo_ProgramType.Descriptor instead.
func (CubeInfo_ProgramType) EnumDescriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{11, 0}
}

type CubeManagement_ServiceType int32

const (
	CubeManagement_STANDARD    CubeManagement_ServiceType = 0
	CubeManagement_TRANSPARENT CubeManagement_ServiceType = 1
)

// Enum value maps for CubeManagement_ServiceType.
var (
	CubeManagement_ServiceType_name = map[int32]string{
		0: "STANDARD",
		1: "TRANSPARENT",
	}
	CubeManagement_ServiceType_value = map[string]int32{
		"STANDARD":    0,
		"TRANSPARENT": 1,
	}
)

func (x CubeManagement_ServiceType) Enum() *CubeManagement_ServiceType {
	p := new(CubeManagement_ServiceType)
	*p = x
	return p
}

func (x CubeManagement_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CubeManagement_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_polycube_grpc_commons_proto_enumTypes[2].Descriptor()
}

func (CubeManagement_ServiceType) Type() protoreflect.EnumType {
	return &file_polycube_grpc_commons_proto_enumTypes[2]
}

func (x CubeManagement_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CubeManagement_ServiceType.Descriptor instead.
func (CubeManagement_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{12, 0}
}

type Port_PortStatus int32

const (
	Port_DOWN Port_PortStatus = 0
	Port_UP   Port_PortStatus = 1
)

// Enum value maps for Port_PortStatus.
var (
	Port_PortStatus_name = map[int32]string{
		0: "DOWN",
		1: "UP",
	}
	Port_PortStatus_value = map[string]int32{
		"DOWN": 0,
		"UP":   1,
	}
)

func (x Port_PortStatus) Enum() *Port_PortStatus {
	p := new(Port_PortStatus)
	*p = x
	return p
}

func (x Port_PortStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_PortStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_polycube_grpc_commons_proto_enumTypes[3].Descriptor()
}

func (Port_PortStatus) Type() protoreflect.EnumType {
	return &file_polycube_grpc_commons_proto_enumTypes[3]
}

func (x Port_PortStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_PortStatus.Descriptor instead.
func (Port_PortStatus) EnumDescriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{13, 0}
}

type Port_PortType int32

const (
	Port_TC  Port_PortType = 0
	Port_XDP Port_PortType = 1
)

// Enum value maps for Port_PortType.
var (
	Port_PortType_name = map[int32]string{
		0: "TC",
		1: "XDP",
	}
	Port_PortType_value = map[string]int32{
		"TC":  0,
		"XDP": 1,
	}
)

func (x Port_PortType) Enum() *Port_PortType {
	p := new(Port_PortType)
	*p = x
	return p
}

func (x Port_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Port_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_polycube_grpc_commons_proto_enumTypes[4].Descriptor()
}

func (Port_PortType) Type() protoreflect.EnumType {
	return &file_polycube_grpc_commons_proto_enumTypes[4]
}

func (x Port_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Port_PortType.Descriptor instead.
func (Port_PortType) EnumDescriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{13, 1}
}

type Dataplane_ProgramType int32

const (
	Dataplane_INGRESS Dataplane_ProgramType = 0
	Dataplane_EGRESS  Dataplane_ProgramType = 1
)

// Enum value maps for Dataplane_ProgramType.
var (
	Dataplane_ProgramType_name = map[int32]string{
		0: "INGRESS",
		1: "EGRESS",
	}
	Dataplane_ProgramType_value = map[string]int32{
		"INGRESS": 0,
		"EGRESS":  1,
	}
)

func (x Dataplane_ProgramType) Enum() *Dataplane_ProgramType {
	p := new(Dataplane_ProgramType)
	*p = x
	return p
}

func (x Dataplane_ProgramType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dataplane_ProgramType) Descriptor() protoreflect.EnumDescriptor {
	return file_polycube_grpc_commons_proto_enumTypes[5].Descriptor()
}

func (Dataplane_ProgramType) Type() protoreflect.EnumType {
	return &file_polycube_grpc_commons_proto_enumTypes[5]
}

func (x Dataplane_ProgramType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dataplane_ProgramType.Descriptor instead.
func (Dataplane_ProgramType) EnumDescriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{19, 0}
}

//
//This message represents an empty message
//Q: Why define a Empty message instead of using google.protobuf.Empty ?
//A: https://github.com/twitchtv/twirp/issues/104
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{0}
}

//
//generic message wrapper with a bool field
//use case: unsubscribe serviced reply
//
//Why a wrapper? We cannot use a primitive type. We MUST use a message type.
//This is important because a message type can be extended later,
//in case we decide you want to add a new parameter or return some additional data.
type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{1}
}

func (x *Bool) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

//
//This message contains useful info about the serviced/client
//maybe this will be put inside metadata in the future
//
//cube_name is optional because the ServicedInfo could be used
// as a message referred for a cube (in ToPolycubed or ToServiced) ==> cube_name is not empty
// or as a message for the service registration phase (in ToPolycubed with subscribe=true) ==> cube_name is empty
type ServicedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string                    `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"` // router
	Uuid        int32                     `protobuf:"varint,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                 // random number generated from the service, to uniquely identify a service/cube/client
	ServiceType *ServicedInfo_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=commons.ServicedInfo_ServiceType,oneof" json:"service_type,omitempty"`
	CubeName    *string                   `protobuf:"bytes,4,opt,name=cube_name,json=cubeName,proto3,oneof" json:"cube_name,omitempty"` //r1
	PortName    *string                   `protobuf:"bytes,5,opt,name=port_name,json=portName,proto3,oneof" json:"port_name,omitempty"` //p1
	PeerName    *string                   `protobuf:"bytes,6,opt,name=peer_name,json=peerName,proto3,oneof" json:"peer_name,omitempty"` //toVeth1
}

func (x *ServicedInfo) Reset() {
	*x = ServicedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicedInfo) ProtoMessage() {}

func (x *ServicedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicedInfo.ProtoReflect.Descriptor instead.
func (*ServicedInfo) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{2}
}

func (x *ServicedInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServicedInfo) GetUuid() int32 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *ServicedInfo) GetServiceType() ServicedInfo_ServiceType {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return ServicedInfo_STANDARD
}

func (x *ServicedInfo) GetCubeName() string {
	if x != nil && x.CubeName != nil {
		return *x.CubeName
	}
	return ""
}

func (x *ServicedInfo) GetPortName() string {
	if x != nil && x.PortName != nil {
		return *x.PortName
	}
	return ""
}

func (x *ServicedInfo) GetPeerName() string {
	if x != nil && x.PeerName != nil {
		return *x.PeerName
	}
	return ""
}

//
//This message represents a wrapper for all data passing through the stream
//from Polycubed to Serviced
//As you can see there is the oneof keyword to distinguish between various cases
//oneof description: If you have a message with many optional fields and where at most
//one field will be set at the same time, you can enforce this behavior and save memory
//by using the oneof feature.
type ToServiced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicedInfo *ServicedInfo `protobuf:"bytes,1,opt,name=serviced_info,json=servicedInfo,proto3" json:"serviced_info,omitempty"`
	// Types that are assignable to ToServiced:
	//	*ToServiced_DataplaneToServicedRequest
	//	*ToServiced_RestUserToServiceRequest
	//	*ToServiced_DataplaneToServicedPacket
	ToServiced isToServiced_ToServiced `protobuf_oneof:"to_serviced"`
}

func (x *ToServiced) Reset() {
	*x = ToServiced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToServiced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToServiced) ProtoMessage() {}

func (x *ToServiced) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToServiced.ProtoReflect.Descriptor instead.
func (*ToServiced) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{3}
}

func (x *ToServiced) GetServicedInfo() *ServicedInfo {
	if x != nil {
		return x.ServicedInfo
	}
	return nil
}

func (m *ToServiced) GetToServiced() isToServiced_ToServiced {
	if m != nil {
		return m.ToServiced
	}
	return nil
}

func (x *ToServiced) GetDataplaneToServicedRequest() *DataplaneToServicedRequest {
	if x, ok := x.GetToServiced().(*ToServiced_DataplaneToServicedRequest); ok {
		return x.DataplaneToServicedRequest
	}
	return nil
}

func (x *ToServiced) GetRestUserToServiceRequest() *RestUserToServicedRequest {
	if x, ok := x.GetToServiced().(*ToServiced_RestUserToServiceRequest); ok {
		return x.RestUserToServiceRequest
	}
	return nil
}

func (x *ToServiced) GetDataplaneToServicedPacket() *DataplaneToServicedPacket {
	if x, ok := x.GetToServiced().(*ToServiced_DataplaneToServicedPacket); ok {
		return x.DataplaneToServicedPacket
	}
	return nil
}

type isToServiced_ToServiced interface {
	isToServiced_ToServiced()
}

type ToServiced_DataplaneToServicedRequest struct {
	DataplaneToServicedRequest *DataplaneToServicedRequest `protobuf:"bytes,2,opt,name=dataplane_to_serviced_request,json=dataplaneToServicedRequest,proto3,oneof"`
}

type ToServiced_RestUserToServiceRequest struct {
	RestUserToServiceRequest *RestUserToServicedRequest `protobuf:"bytes,3,opt,name=rest_user_to_service_request,json=restUserToServiceRequest,proto3,oneof"`
}

type ToServiced_DataplaneToServicedPacket struct {
	DataplaneToServicedPacket *DataplaneToServicedPacket `protobuf:"bytes,4,opt,name=dataplane_to_serviced_packet,json=dataplaneToServicedPacket,proto3,oneof"`
}

func (*ToServiced_DataplaneToServicedRequest) isToServiced_ToServiced() {}

func (*ToServiced_RestUserToServiceRequest) isToServiced_ToServiced() {}

func (*ToServiced_DataplaneToServicedPacket) isToServiced_ToServiced() {}

//
//user to dataplane case: this is the message created from the rest user (for example with polycubectl)
//to the dataplane of the serviced, it should pass through the serviced i.e. the controlplane
//
//user to service case: this is the message created from the rest user to the controlplane of the serviced
//
//the serviced should be distinguish between the two cases above and in the first case it should
//create a unary request to Polycubed which will contact the dataplane of Serviced
type RestUserToServicedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpVerb    string  `protobuf:"bytes,1,opt,name=http_verb,json=httpVerb,proto3" json:"http_verb,omitempty"`                // PATCH
	Url         string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                                          // http://localhost:9000/polycube/v1/router/r1/ports/p1/ip
	RequestBody *string `protobuf:"bytes,3,opt,name=request_body,json=requestBody,proto3,oneof" json:"request_body,omitempty"` // request body "1.1.1.1/24"
}

func (x *RestUserToServicedRequest) Reset() {
	*x = RestUserToServicedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestUserToServicedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestUserToServicedRequest) ProtoMessage() {}

func (x *RestUserToServicedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestUserToServicedRequest.ProtoReflect.Descriptor instead.
func (*RestUserToServicedRequest) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{4}
}

func (x *RestUserToServicedRequest) GetHttpVerb() string {
	if x != nil {
		return x.HttpVerb
	}
	return ""
}

func (x *RestUserToServicedRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RestUserToServicedRequest) GetRequestBody() string {
	if x != nil && x.RequestBody != nil {
		return *x.RequestBody
	}
	return ""
}

//
//dataplane to service case: this is the request created from the dataplane to the service
type DataplaneToServicedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlplaneMethod string   `protobuf:"bytes,1,opt,name=controlplane_method,json=controlplaneMethod,proto3" json:"controlplane_method,omitempty"`
	Parameters         [][]byte `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *DataplaneToServicedRequest) Reset() {
	*x = DataplaneToServicedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataplaneToServicedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataplaneToServicedRequest) ProtoMessage() {}

func (x *DataplaneToServicedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataplaneToServicedRequest.ProtoReflect.Descriptor instead.
func (*DataplaneToServicedRequest) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{5}
}

func (x *DataplaneToServicedRequest) GetControlplaneMethod() string {
	if x != nil {
		return x.ControlplaneMethod
	}
	return ""
}

func (x *DataplaneToServicedRequest) GetParameters() [][]byte {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// (pinoOgni): Attention some things were 16 but now they are 32 due to protobuf
type DataplaneToServicedPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CubeId       uint32   `protobuf:"varint,1,opt,name=cube_id,json=cubeId,proto3" json:"cube_id,omitempty"`
	PortId       uint32   `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	PacketLen    uint32   `protobuf:"varint,3,opt,name=packet_len,json=packetLen,proto3" json:"packet_len,omitempty"`
	TrafficClass uint32   `protobuf:"varint,4,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	Reason       uint32   `protobuf:"varint,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Metadata     []uint32 `protobuf:"varint,6,rep,packed,name=metadata,proto3" json:"metadata,omitempty"`
	Packet       []uint32 `protobuf:"varint,7,rep,packed,name=packet,proto3" json:"packet,omitempty"`
}

func (x *DataplaneToServicedPacket) Reset() {
	*x = DataplaneToServicedPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataplaneToServicedPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataplaneToServicedPacket) ProtoMessage() {}

func (x *DataplaneToServicedPacket) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataplaneToServicedPacket.ProtoReflect.Descriptor instead.
func (*DataplaneToServicedPacket) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{6}
}

func (x *DataplaneToServicedPacket) GetCubeId() uint32 {
	if x != nil {
		return x.CubeId
	}
	return 0
}

func (x *DataplaneToServicedPacket) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *DataplaneToServicedPacket) GetPacketLen() uint32 {
	if x != nil {
		return x.PacketLen
	}
	return 0
}

func (x *DataplaneToServicedPacket) GetTrafficClass() uint32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *DataplaneToServicedPacket) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *DataplaneToServicedPacket) GetMetadata() []uint32 {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DataplaneToServicedPacket) GetPacket() []uint32 {
	if x != nil {
		return x.Packet
	}
	return nil
}

//
//This message represents a wrapper for all data passing through the stream
//from Serviced to Polycubed (in the case of subscribe=true, this message does not
//really pass through the stream but it is used to create the stream)
//As you can see there is the oneof keyword to distinguish between various cases
//oneof description: If you have a message with many optional fields and where at most
//one field will be set at the same time, you can enforce this behavior and save memory
//by using the oneof feature.
type ToPolycubed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicedInfo *ServicedInfo `protobuf:"bytes,1,opt,name=serviced_info,json=servicedInfo,proto3" json:"serviced_info,omitempty"`
	// Types that are assignable to ToPolycubed:
	//	*ToPolycubed_Subscribe
	//	*ToPolycubed_ServicedToDataplaneReply
	//	*ToPolycubed_ServicedToRestUserReply
	ToPolycubed isToPolycubed_ToPolycubed `protobuf_oneof:"to_polycubed"`
}

func (x *ToPolycubed) Reset() {
	*x = ToPolycubed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToPolycubed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToPolycubed) ProtoMessage() {}

func (x *ToPolycubed) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToPolycubed.ProtoReflect.Descriptor instead.
func (*ToPolycubed) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{7}
}

func (x *ToPolycubed) GetServicedInfo() *ServicedInfo {
	if x != nil {
		return x.ServicedInfo
	}
	return nil
}

func (m *ToPolycubed) GetToPolycubed() isToPolycubed_ToPolycubed {
	if m != nil {
		return m.ToPolycubed
	}
	return nil
}

func (x *ToPolycubed) GetSubscribe() bool {
	if x, ok := x.GetToPolycubed().(*ToPolycubed_Subscribe); ok {
		return x.Subscribe
	}
	return false
}

func (x *ToPolycubed) GetServicedToDataplaneReply() *ServicedToDataplaneReply {
	if x, ok := x.GetToPolycubed().(*ToPolycubed_ServicedToDataplaneReply); ok {
		return x.ServicedToDataplaneReply
	}
	return nil
}

func (x *ToPolycubed) GetServicedToRestUserReply() *ServicedToRestUserReply {
	if x, ok := x.GetToPolycubed().(*ToPolycubed_ServicedToRestUserReply); ok {
		return x.ServicedToRestUserReply
	}
	return nil
}

type isToPolycubed_ToPolycubed interface {
	isToPolycubed_ToPolycubed()
}

type ToPolycubed_Subscribe struct {
	Subscribe bool `protobuf:"varint,2,opt,name=subscribe,proto3,oneof"`
}

type ToPolycubed_ServicedToDataplaneReply struct {
	ServicedToDataplaneReply *ServicedToDataplaneReply `protobuf:"bytes,3,opt,name=serviced_to_dataplane_reply,json=servicedToDataplaneReply,proto3,oneof"`
}

type ToPolycubed_ServicedToRestUserReply struct {
	ServicedToRestUserReply *ServicedToRestUserReply `protobuf:"bytes,4,opt,name=serviced_to_rest_user_reply,json=servicedToRestUserReply,proto3,oneof"`
}

func (*ToPolycubed_Subscribe) isToPolycubed_ToPolycubed() {}

func (*ToPolycubed_ServicedToDataplaneReply) isToPolycubed_ToPolycubed() {}

func (*ToPolycubed_ServicedToRestUserReply) isToPolycubed_ToPolycubed() {}

//
//dataplane to service case: this is the reply created from the serviced
//for a dataplane request
type ServicedToDataplaneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`      // true/false for operation success
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"` // possible message to be displayed/used by dataplane (?)
}

func (x *ServicedToDataplaneReply) Reset() {
	*x = ServicedToDataplaneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicedToDataplaneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicedToDataplaneReply) ProtoMessage() {}

func (x *ServicedToDataplaneReply) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicedToDataplaneReply.ProtoReflect.Descriptor instead.
func (*ServicedToDataplaneReply) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{8}
}

func (x *ServicedToDataplaneReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ServicedToDataplaneReply) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

//
//user to dataplane case: this is the reply created from the serviced with the result of the dataplane
//user to service case: this is the reply created from the serviced
type ServicedToRestUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`      // true/false for operation success
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"` // possible message to be displayed to the final rest user
}

func (x *ServicedToRestUserReply) Reset() {
	*x = ServicedToRestUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicedToRestUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicedToRestUserReply) ProtoMessage() {}

func (x *ServicedToRestUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicedToRestUserReply.ProtoReflect.Descriptor instead.
func (*ServicedToRestUserReply) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{9}
}

func (x *ServicedToRestUserReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ServicedToRestUserReply) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

//
//This message is used for request coming from the service, which will use unary calls
//This can be used in both service to dataplane OR user to dataplane cases: REQUEST
type ServicedToDataplaneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicedInfo *ServicedInfo `protobuf:"bytes,1,opt,name=serviced_info,json=servicedInfo,proto3" json:"serviced_info,omitempty"`
	CubeInfo     *CubeInfo     `protobuf:"bytes,2,opt,name=cube_info,json=cubeInfo,proto3" json:"cube_info,omitempty"`
	// Types that are assignable to RequestType:
	//	*ServicedToDataplaneRequest_SetRequest
	//	*ServicedToDataplaneRequest_GetRequest
	//	*ServicedToDataplaneRequest_RemoveRequest
	//	*ServicedToDataplaneRequest_Port
	RequestType isServicedToDataplaneRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *ServicedToDataplaneRequest) Reset() {
	*x = ServicedToDataplaneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicedToDataplaneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicedToDataplaneRequest) ProtoMessage() {}

func (x *ServicedToDataplaneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicedToDataplaneRequest.ProtoReflect.Descriptor instead.
func (*ServicedToDataplaneRequest) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{10}
}

func (x *ServicedToDataplaneRequest) GetServicedInfo() *ServicedInfo {
	if x != nil {
		return x.ServicedInfo
	}
	return nil
}

func (x *ServicedToDataplaneRequest) GetCubeInfo() *CubeInfo {
	if x != nil {
		return x.CubeInfo
	}
	return nil
}

func (m *ServicedToDataplaneRequest) GetRequestType() isServicedToDataplaneRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *ServicedToDataplaneRequest) GetSetRequest() *SetRequest {
	if x, ok := x.GetRequestType().(*ServicedToDataplaneRequest_SetRequest); ok {
		return x.SetRequest
	}
	return nil
}

func (x *ServicedToDataplaneRequest) GetGetRequest() *GetRequest {
	if x, ok := x.GetRequestType().(*ServicedToDataplaneRequest_GetRequest); ok {
		return x.GetRequest
	}
	return nil
}

func (x *ServicedToDataplaneRequest) GetRemoveRequest() *RemoveRequest {
	if x, ok := x.GetRequestType().(*ServicedToDataplaneRequest_RemoveRequest); ok {
		return x.RemoveRequest
	}
	return nil
}

func (x *ServicedToDataplaneRequest) GetPort() *Port {
	if x, ok := x.GetRequestType().(*ServicedToDataplaneRequest_Port); ok {
		return x.Port
	}
	return nil
}

type isServicedToDataplaneRequest_RequestType interface {
	isServicedToDataplaneRequest_RequestType()
}

type ServicedToDataplaneRequest_SetRequest struct {
	SetRequest *SetRequest `protobuf:"bytes,3,opt,name=set_request,json=setRequest,proto3,oneof"`
}

type ServicedToDataplaneRequest_GetRequest struct {
	GetRequest *GetRequest `protobuf:"bytes,4,opt,name=get_request,json=getRequest,proto3,oneof"`
}

type ServicedToDataplaneRequest_RemoveRequest struct {
	RemoveRequest *RemoveRequest `protobuf:"bytes,5,opt,name=remove_request,json=removeRequest,proto3,oneof"`
}

type ServicedToDataplaneRequest_Port struct {
	Port *Port `protobuf:"bytes,6,opt,name=port,proto3,oneof"`
}

func (*ServicedToDataplaneRequest_SetRequest) isServicedToDataplaneRequest_RequestType() {}

func (*ServicedToDataplaneRequest_GetRequest) isServicedToDataplaneRequest_RequestType() {}

func (*ServicedToDataplaneRequest_RemoveRequest) isServicedToDataplaneRequest_RequestType() {}

func (*ServicedToDataplaneRequest_Port) isServicedToDataplaneRequest_RequestType() {}

type CubeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CubeName    string               `protobuf:"bytes,1,opt,name=cube_name,json=cubeName,proto3" json:"cube_name,omitempty"`
	MapName     string               `protobuf:"bytes,2,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	Index       int32                `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	ProgramType CubeInfo_ProgramType `protobuf:"varint,4,opt,name=program_type,json=programType,proto3,enum=commons.CubeInfo_ProgramType" json:"program_type,omitempty"`
}

func (x *CubeInfo) Reset() {
	*x = CubeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CubeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CubeInfo) ProtoMessage() {}

func (x *CubeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CubeInfo.ProtoReflect.Descriptor instead.
func (*CubeInfo) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{11}
}

func (x *CubeInfo) GetCubeName() string {
	if x != nil {
		return x.CubeName
	}
	return ""
}

func (x *CubeInfo) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *CubeInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CubeInfo) GetProgramType() CubeInfo_ProgramType {
	if x != nil {
		return x.ProgramType
	}
	return CubeInfo_INGRESS
}

//
//This message is used for the cube creation and also for cube destruction
//1. create cube: cube_name, maybe service_name, ingress_code, egress_code, loglevel and cube_type
//2. destroy cube: cube_name, service_name, maybe cube_type
type CubeManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CubeName    string                      `protobuf:"bytes,1,opt,name=cube_name,json=cubeName,proto3" json:"cube_name,omitempty"`
	ServiceName *string                     `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3,oneof" json:"service_name,omitempty"`
	Uuid        *int32                      `protobuf:"varint,3,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	ServiceType *CubeManagement_ServiceType `protobuf:"varint,4,opt,name=service_type,json=serviceType,proto3,enum=commons.CubeManagement_ServiceType,oneof" json:"service_type,omitempty"`
	IngressCode *string                     `protobuf:"bytes,5,opt,name=ingress_code,json=ingressCode,proto3,oneof" json:"ingress_code,omitempty"`
	EgressCode  *string                     `protobuf:"bytes,6,opt,name=egress_code,json=egressCode,proto3,oneof" json:"egress_code,omitempty"`
	Loglevel    *string                     `protobuf:"bytes,7,opt,name=loglevel,proto3,oneof" json:"loglevel,omitempty"`
	Conf        *string                     `protobuf:"bytes,8,opt,name=conf,proto3,oneof" json:"conf,omitempty"`
}

func (x *CubeManagement) Reset() {
	*x = CubeManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CubeManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CubeManagement) ProtoMessage() {}

func (x *CubeManagement) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CubeManagement.ProtoReflect.Descriptor instead.
func (*CubeManagement) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{12}
}

func (x *CubeManagement) GetCubeName() string {
	if x != nil {
		return x.CubeName
	}
	return ""
}

func (x *CubeManagement) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *CubeManagement) GetUuid() int32 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *CubeManagement) GetServiceType() CubeManagement_ServiceType {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return CubeManagement_STANDARD
}

func (x *CubeManagement) GetIngressCode() string {
	if x != nil && x.IngressCode != nil {
		return *x.IngressCode
	}
	return ""
}

func (x *CubeManagement) GetEgressCode() string {
	if x != nil && x.EgressCode != nil {
		return *x.EgressCode
	}
	return ""
}

func (x *CubeManagement) GetLoglevel() string {
	if x != nil && x.Loglevel != nil {
		return *x.Loglevel
	}
	return ""
}

func (x *CubeManagement) GetConf() string {
	if x != nil && x.Conf != nil {
		return *x.Conf
	}
	return ""
}

//
//This message is used to represent a generic port
//Version 1
//(pinoOgni): TODO improve it
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Peer       *string         `protobuf:"bytes,2,opt,name=peer,proto3,oneof" json:"peer,omitempty"`
	PortStatus Port_PortStatus `protobuf:"varint,3,opt,name=port_status,json=portStatus,proto3,enum=commons.Port_PortStatus" json:"port_status,omitempty"`
	PortType   Port_PortType   `protobuf:"varint,4,opt,name=port_type,json=portType,proto3,enum=commons.Port_PortType" json:"port_type,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{13}
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Port) GetPeer() string {
	if x != nil && x.Peer != nil {
		return *x.Peer
	}
	return ""
}

func (x *Port) GetPortStatus() Port_PortStatus {
	if x != nil {
		return x.PortStatus
	}
	return Port_DOWN
}

func (x *Port) GetPortType() Port_PortType {
	if x != nil {
		return x.PortType
	}
	return Port_TC
}

type MapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteValues []byte `protobuf:"bytes,1,opt,name=byteValues,proto3" json:"byteValues,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       int32  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	KeySize    uint64 `protobuf:"varint,4,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"` // sizes are in bytes
	LeafSize   uint64 `protobuf:"varint,5,opt,name=leaf_size,json=leafSize,proto3" json:"leaf_size,omitempty"`
	MaxEntries uint64 `protobuf:"varint,6,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	Flags      int32  `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	KeyDesc    string `protobuf:"bytes,8,opt,name=key_desc,json=keyDesc,proto3" json:"key_desc,omitempty"`
	LeafDesc   string `protobuf:"bytes,9,opt,name=leaf_desc,json=leafDesc,proto3" json:"leaf_desc,omitempty"`
	Counter    *int32 `protobuf:"varint,10,opt,name=counter,proto3,oneof" json:"counter,omitempty"`
}

func (x *MapValue) Reset() {
	*x = MapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValue) ProtoMessage() {}

func (x *MapValue) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValue.ProtoReflect.Descriptor instead.
func (*MapValue) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{14}
}

func (x *MapValue) GetByteValues() []byte {
	if x != nil {
		return x.ByteValues
	}
	return nil
}

func (x *MapValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MapValue) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MapValue) GetKeySize() uint64 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *MapValue) GetLeafSize() uint64 {
	if x != nil {
		return x.LeafSize
	}
	return 0
}

func (x *MapValue) GetMaxEntries() uint64 {
	if x != nil {
		return x.MaxEntries
	}
	return 0
}

func (x *MapValue) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *MapValue) GetKeyDesc() string {
	if x != nil {
		return x.KeyDesc
	}
	return ""
}

func (x *MapValue) GetLeafDesc() string {
	if x != nil {
		return x.LeafDesc
	}
	return ""
}

func (x *MapValue) GetCounter() int32 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

//
//This message is used to set a value in a map (the map name is defined in the CubeInfo message)
//The sizes are set for safety
type SetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeySize   uint64 `protobuf:"varint,2,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ValueSize uint64 `protobuf:"varint,4,opt,name=value_size,json=valueSize,proto3" json:"value_size,omitempty"`
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{15}
}

func (x *SetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SetRequest) GetKeySize() uint64 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *SetRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SetRequest) GetValueSize() uint64 {
	if x != nil {
		return x.ValueSize
	}
	return 0
}

//
//This message is used to a get request.
//There are 2 cases: get a single value where the client need to set all=false, the key, the key_size and the value_size (for safety)
//and the second case is where the client wants the all map and so it sets all=true
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All       bool   `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"`
	KeySize   uint64 `protobuf:"varint,3,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	ValueSize uint64 `protobuf:"varint,4,opt,name=value_size,json=valueSize,proto3" json:"value_size,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{16}
}

func (x *GetRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *GetRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetRequest) GetKeySize() uint64 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *GetRequest) GetValueSize() uint64 {
	if x != nil {
		return x.ValueSize
	}
	return 0
}

//
//This message is used in the request for the dataplane.
//It is used for both remove a single element and remove the entire map
//To remove a single element the client needs to set all=false then the key and the key_size (for safety)
//TO remove the all map the client need to set all=true
type RemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All     bool   `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Key     []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeySize uint64 `protobuf:"varint,3,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
}

func (x *RemoveRequest) Reset() {
	*x = RemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRequest) ProtoMessage() {}

func (x *RemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRequest.ProtoReflect.Descriptor instead.
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *RemoveRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RemoveRequest) GetKeySize() uint64 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

//
//NOT USED
type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{18}
}

func (x *Index) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

//
//NOT USED
//This message is used to add a program or to delete it
// If it is used by the CreateCube or Reload methods, the code contains the dataplane
// If it is used by the DestroyCube methods, the code is empty
type Dataplane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CubeName    string                `protobuf:"bytes,1,opt,name=cube_name,json=cubeName,proto3" json:"cube_name,omitempty"`
	Code        *string               `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Index       int32                 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	ProgramType Dataplane_ProgramType `protobuf:"varint,4,opt,name=program_type,json=programType,proto3,enum=commons.Dataplane_ProgramType" json:"program_type,omitempty"`
}

func (x *Dataplane) Reset() {
	*x = Dataplane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_polycube_grpc_commons_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataplane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane) ProtoMessage() {}

func (x *Dataplane) ProtoReflect() protoreflect.Message {
	mi := &file_polycube_grpc_commons_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane.ProtoReflect.Descriptor instead.
func (*Dataplane) Descriptor() ([]byte, []int) {
	return file_polycube_grpc_commons_proto_rawDescGZIP(), []int{19}
}

func (x *Dataplane) GetCubeName() string {
	if x != nil {
		return x.CubeName
	}
	return ""
}

func (x *Dataplane) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Dataplane) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Dataplane) GetProgramType() Dataplane_ProgramType {
	if x != nil {
		return x.ProgramType
	}
	return Dataplane_INGRESS
}

var File_polycube_grpc_commons_proto protoreflect.FileDescriptor

var file_polycube_grpc_commons_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6f, 0x6c, 0x79, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x1e, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xdf, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x75, 0x62, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x22, 0x2c, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x75, 0x62, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x8e, 0x03, 0x0a, 0x0a, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x68, 0x0a, 0x1d,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x1c,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x19, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x62, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x6d, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x62, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x0b, 0x54, 0x6f, 0x50, 0x6f,
	0x6c, 0x79, 0x63, 0x75, 0x62, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x62, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x18, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x60, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54,
	0x6f, 0x52, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x6f, 0x5f,
	0x70, 0x6f, 0x6c, 0x79, 0x63, 0x75, 0x62, 0x65, 0x64, 0x22, 0x5f, 0x0a, 0x18, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x17, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x1a, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x75, 0x62,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x08,
	0x43, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x62, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x62,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x43, 0x75, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x66, 0x88, 0x01, 0x01, 0x22, 0x2c, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x41, 0x52, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x22, 0xe9, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1e, 0x0a, 0x0a,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x01, 0x22, 0x1b, 0x0a, 0x08,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x43, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x58, 0x44, 0x50, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x22, 0xa4, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x77, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b,
	0x65, 0x79, 0x22, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x1d, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xcb, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x62, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x62, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0xc1, 0x06, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x79, 0x63, 0x75, 0x62, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x50, 0x6f, 0x6c,
	0x79, 0x63, 0x75, 0x62, 0x65, 0x64, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x1a,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x75, 0x62, 0x65,
	0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x62, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x75, 0x62, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x64, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x54,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x42, 0x5a, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x6f, 0x4f, 0x67, 0x6e, 0x69, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x63,
	0x75, 0x62, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x79, 0x63,
	0x75, 0x62, 0x65, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x3b, 0x70, 0x6f, 0x6c, 0x79,
	0x63, 0x75, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x6f, 0xf8, 0x01, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_polycube_grpc_commons_proto_rawDescOnce sync.Once
	file_polycube_grpc_commons_proto_rawDescData = file_polycube_grpc_commons_proto_rawDesc
)

func file_polycube_grpc_commons_proto_rawDescGZIP() []byte {
	file_polycube_grpc_commons_proto_rawDescOnce.Do(func() {
		file_polycube_grpc_commons_proto_rawDescData = protoimpl.X.CompressGZIP(file_polycube_grpc_commons_proto_rawDescData)
	})
	return file_polycube_grpc_commons_proto_rawDescData
}

var file_polycube_grpc_commons_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_polycube_grpc_commons_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_polycube_grpc_commons_proto_goTypes = []interface{}{
	(ServicedInfo_ServiceType)(0),      // 0: commons.ServicedInfo.ServiceType
	(CubeInfo_ProgramType)(0),          // 1: commons.CubeInfo.ProgramType
	(CubeManagement_ServiceType)(0),    // 2: commons.CubeManagement.ServiceType
	(Port_PortStatus)(0),               // 3: commons.Port.PortStatus
	(Port_PortType)(0),                 // 4: commons.Port.PortType
	(Dataplane_ProgramType)(0),         // 5: commons.Dataplane.ProgramType
	(*Empty)(nil),                      // 6: commons.Empty
	(*Bool)(nil),                       // 7: commons.Bool
	(*ServicedInfo)(nil),               // 8: commons.ServicedInfo
	(*ToServiced)(nil),                 // 9: commons.ToServiced
	(*RestUserToServicedRequest)(nil),  // 10: commons.RestUserToServicedRequest
	(*DataplaneToServicedRequest)(nil), // 11: commons.DataplaneToServicedRequest
	(*DataplaneToServicedPacket)(nil),  // 12: commons.DataplaneToServicedPacket
	(*ToPolycubed)(nil),                // 13: commons.ToPolycubed
	(*ServicedToDataplaneReply)(nil),   // 14: commons.ServicedToDataplaneReply
	(*ServicedToRestUserReply)(nil),    // 15: commons.ServicedToRestUserReply
	(*ServicedToDataplaneRequest)(nil), // 16: commons.ServicedToDataplaneRequest
	(*CubeInfo)(nil),                   // 17: commons.CubeInfo
	(*CubeManagement)(nil),             // 18: commons.CubeManagement
	(*Port)(nil),                       // 19: commons.Port
	(*MapValue)(nil),                   // 20: commons.MapValue
	(*SetRequest)(nil),                 // 21: commons.SetRequest
	(*GetRequest)(nil),                 // 22: commons.GetRequest
	(*RemoveRequest)(nil),              // 23: commons.RemoveRequest
	(*Index)(nil),                      // 24: commons.Index
	(*Dataplane)(nil),                  // 25: commons.Dataplane
}
var file_polycube_grpc_commons_proto_depIdxs = []int32{
	0,  // 0: commons.ServicedInfo.service_type:type_name -> commons.ServicedInfo.ServiceType
	8,  // 1: commons.ToServiced.serviced_info:type_name -> commons.ServicedInfo
	11, // 2: commons.ToServiced.dataplane_to_serviced_request:type_name -> commons.DataplaneToServicedRequest
	10, // 3: commons.ToServiced.rest_user_to_service_request:type_name -> commons.RestUserToServicedRequest
	12, // 4: commons.ToServiced.dataplane_to_serviced_packet:type_name -> commons.DataplaneToServicedPacket
	8,  // 5: commons.ToPolycubed.serviced_info:type_name -> commons.ServicedInfo
	14, // 6: commons.ToPolycubed.serviced_to_dataplane_reply:type_name -> commons.ServicedToDataplaneReply
	15, // 7: commons.ToPolycubed.serviced_to_rest_user_reply:type_name -> commons.ServicedToRestUserReply
	8,  // 8: commons.ServicedToDataplaneRequest.serviced_info:type_name -> commons.ServicedInfo
	17, // 9: commons.ServicedToDataplaneRequest.cube_info:type_name -> commons.CubeInfo
	21, // 10: commons.ServicedToDataplaneRequest.set_request:type_name -> commons.SetRequest
	22, // 11: commons.ServicedToDataplaneRequest.get_request:type_name -> commons.GetRequest
	23, // 12: commons.ServicedToDataplaneRequest.remove_request:type_name -> commons.RemoveRequest
	19, // 13: commons.ServicedToDataplaneRequest.port:type_name -> commons.Port
	1,  // 14: commons.CubeInfo.program_type:type_name -> commons.CubeInfo.ProgramType
	2,  // 15: commons.CubeManagement.service_type:type_name -> commons.CubeManagement.ServiceType
	3,  // 16: commons.Port.port_status:type_name -> commons.Port.PortStatus
	4,  // 17: commons.Port.port_type:type_name -> commons.Port.PortType
	5,  // 18: commons.Dataplane.program_type:type_name -> commons.Dataplane.ProgramType
	8,  // 19: commons.Polycube.Unsubscribe:input_type -> commons.ServicedInfo
	13, // 20: commons.Polycube.Subscribe:input_type -> commons.ToPolycubed
	25, // 21: commons.Polycube.Reload:input_type -> commons.Dataplane
	18, // 22: commons.Polycube.DestroyCube:input_type -> commons.CubeManagement
	18, // 23: commons.Polycube.CreateCube:input_type -> commons.CubeManagement
	16, // 24: commons.Polycube.TableSet:input_type -> commons.ServicedToDataplaneRequest
	16, // 25: commons.Polycube.TableGetAll:input_type -> commons.ServicedToDataplaneRequest
	16, // 26: commons.Polycube.TableGet:input_type -> commons.ServicedToDataplaneRequest
	16, // 27: commons.Polycube.TableRemove:input_type -> commons.ServicedToDataplaneRequest
	16, // 28: commons.Polycube.TableRemoveAll:input_type -> commons.ServicedToDataplaneRequest
	16, // 29: commons.Polycube.SetPort:input_type -> commons.ServicedToDataplaneRequest
	16, // 30: commons.Polycube.DelPort:input_type -> commons.ServicedToDataplaneRequest
	16, // 31: commons.Polycube.SetPeer:input_type -> commons.ServicedToDataplaneRequest
	7,  // 32: commons.Polycube.Unsubscribe:output_type -> commons.Bool
	9,  // 33: commons.Polycube.Subscribe:output_type -> commons.ToServiced
	6,  // 34: commons.Polycube.Reload:output_type -> commons.Empty
	7,  // 35: commons.Polycube.DestroyCube:output_type -> commons.Bool
	7,  // 36: commons.Polycube.CreateCube:output_type -> commons.Bool
	7,  // 37: commons.Polycube.TableSet:output_type -> commons.Bool
	20, // 38: commons.Polycube.TableGetAll:output_type -> commons.MapValue
	20, // 39: commons.Polycube.TableGet:output_type -> commons.MapValue
	7,  // 40: commons.Polycube.TableRemove:output_type -> commons.Bool
	7,  // 41: commons.Polycube.TableRemoveAll:output_type -> commons.Bool
	7,  // 42: commons.Polycube.SetPort:output_type -> commons.Bool
	7,  // 43: commons.Polycube.DelPort:output_type -> commons.Bool
	7,  // 44: commons.Polycube.SetPeer:output_type -> commons.Bool
	32, // [32:45] is the sub-list for method output_type
	19, // [19:32] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_polycube_grpc_commons_proto_init() }
func file_polycube_grpc_commons_proto_init() {
	if File_polycube_grpc_commons_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_polycube_grpc_commons_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToServiced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestUserToServicedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataplaneToServicedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataplaneToServicedPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToPolycubed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicedToDataplaneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicedToRestUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicedToDataplaneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CubeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CubeManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_polycube_grpc_commons_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataplane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_polycube_grpc_commons_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ToServiced_DataplaneToServicedRequest)(nil),
		(*ToServiced_RestUserToServiceRequest)(nil),
		(*ToServiced_DataplaneToServicedPacket)(nil),
	}
	file_polycube_grpc_commons_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ToPolycubed_Subscribe)(nil),
		(*ToPolycubed_ServicedToDataplaneReply)(nil),
		(*ToPolycubed_ServicedToRestUserReply)(nil),
	}
	file_polycube_grpc_commons_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ServicedToDataplaneRequest_SetRequest)(nil),
		(*ServicedToDataplaneRequest_GetRequest)(nil),
		(*ServicedToDataplaneRequest_RemoveRequest)(nil),
		(*ServicedToDataplaneRequest_Port)(nil),
	}
	file_polycube_grpc_commons_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_polycube_grpc_commons_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_polycube_grpc_commons_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_polycube_grpc_commons_proto_goTypes,
		DependencyIndexes: file_polycube_grpc_commons_proto_depIdxs,
		EnumInfos:         file_polycube_grpc_commons_proto_enumTypes,
		MessageInfos:      file_polycube_grpc_commons_proto_msgTypes,
	}.Build()
	File_polycube_grpc_commons_proto = out.File
	file_polycube_grpc_commons_proto_rawDesc = nil
	file_polycube_grpc_commons_proto_goTypes = nil
	file_polycube_grpc_commons_proto_depIdxs = nil
}
