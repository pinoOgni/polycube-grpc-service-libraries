// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: polycube_grpc_commons.proto

#include "polycube_grpc_commons.pb.h"
#include "polycube_grpc_commons.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace commons {

static const char* Polycube_method_names[] = {
  "/commons.Polycube/Unsubscribe",
  "/commons.Polycube/Subscribe",
  "/commons.Polycube/Reload",
  "/commons.Polycube/DestroyCube",
  "/commons.Polycube/CreateCube",
  "/commons.Polycube/SimpleUnaryMethod",
  "/commons.Polycube/TableSet",
  "/commons.Polycube/TableGetAll",
  "/commons.Polycube/TableGet",
  "/commons.Polycube/TableRemove",
  "/commons.Polycube/TableRemoveAll",
  "/commons.Polycube/SetPort",
  "/commons.Polycube/DelPort",
  "/commons.Polycube/SetPeer",
};

std::unique_ptr< Polycube::Stub> Polycube::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Polycube::Stub> stub(new Polycube::Stub(channel));
  return stub;
}

Polycube::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Unsubscribe_(Polycube_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(Polycube_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Reload_(Polycube_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyCube_(Polycube_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCube_(Polycube_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SimpleUnaryMethod_(Polycube_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TableSet_(Polycube_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TableGetAll_(Polycube_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TableGet_(Polycube_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TableRemove_(Polycube_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TableRemoveAll_(Polycube_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPort_(Polycube_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelPort_(Polycube_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPeer_(Polycube_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Polycube::Stub::Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedInfo, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unsubscribe_, context, request, response);
}

void Polycube::Stub::experimental_async::Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedInfo, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::ServicedInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unsubscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnsubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>* Polycube::Stub::SubscribeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::commons::ToPolycubed, ::commons::ToServiced>::Create(channel_.get(), rpcmethod_Subscribe_, context);
}

void Polycube::Stub::experimental_async::Subscribe(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::commons::ToPolycubed,::commons::ToServiced>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::commons::ToPolycubed,::commons::ToServiced>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>* Polycube::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::commons::ToPolycubed, ::commons::ToServiced>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>* Polycube::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::commons::ToPolycubed, ::commons::ToServiced>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, false, nullptr);
}

::grpc::Status Polycube::Stub::Reload(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::commons::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::Dataplane, ::commons::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reload_, context, request, response);
}

void Polycube::Stub::experimental_async::Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::Dataplane, ::commons::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reload_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Empty>* Polycube::Stub::PrepareAsyncReloadRaw(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Empty, ::commons::Dataplane, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Empty>* Polycube::Stub::AsyncReloadRaw(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::CubeManagement, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyCube_, context, request, response);
}

void Polycube::Stub::experimental_async::DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::CubeManagement, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyCube_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyCube_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncDestroyCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::CubeManagement, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyCube_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncDestroyCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyCubeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::CubeManagement, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCube_, context, request, response);
}

void Polycube::Stub::experimental_async::CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::CubeManagement, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCube_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCube_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncCreateCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::CubeManagement, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCube_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncCreateCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCubeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::commons::ToServiced* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ToPolycubed, ::commons::ToServiced, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SimpleUnaryMethod_, context, request, response);
}

void Polycube::Stub::experimental_async::SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ToPolycubed, ::commons::ToServiced, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimpleUnaryMethod_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SimpleUnaryMethod_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::ToServiced>* Polycube::Stub::PrepareAsyncSimpleUnaryMethodRaw(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::ToServiced, ::commons::ToPolycubed, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SimpleUnaryMethod_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::ToServiced>* Polycube::Stub::AsyncSimpleUnaryMethodRaw(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSimpleUnaryMethodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TableSet_, context, request, response);
}

void Polycube::Stub::experimental_async::TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableSet_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncTableSetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TableSet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncTableSetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTableSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::MapValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::MapValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TableGetAll_, context, request, response);
}

void Polycube::Stub::experimental_async::TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::MapValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableGetAll_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableGetAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::MapValue>* Polycube::Stub::PrepareAsyncTableGetAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::MapValue, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TableGetAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::MapValue>* Polycube::Stub::AsyncTableGetAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTableGetAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::MapValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::MapValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TableGet_, context, request, response);
}

void Polycube::Stub::experimental_async::TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::MapValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableGet_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::MapValue>* Polycube::Stub::PrepareAsyncTableGetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::MapValue, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TableGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::MapValue>* Polycube::Stub::AsyncTableGetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTableGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TableRemove_, context, request, response);
}

void Polycube::Stub::experimental_async::TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableRemove_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableRemove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncTableRemoveRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TableRemove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncTableRemoveRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTableRemoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TableRemoveAll_, context, request, response);
}

void Polycube::Stub::experimental_async::TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableRemoveAll_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TableRemoveAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncTableRemoveAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TableRemoveAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncTableRemoveAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTableRemoveAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPort_, context, request, response);
}

void Polycube::Stub::experimental_async::SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPort_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncSetPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncSetPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelPort_, context, request, response);
}

void Polycube::Stub::experimental_async::DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelPort_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncDelPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncDelPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Polycube::Stub::SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPeer_, context, request, response);
}

void Polycube::Stub::experimental_async::SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPeer_, context, request, response, std::move(f));
}

void Polycube::Stub::experimental_async::SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::PrepareAsyncSetPeerRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::commons::Bool, ::commons::ServicedToDataplaneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPeer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::commons::Bool>* Polycube::Stub::AsyncSetPeerRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPeerRaw(context, request, cq);
  result->StartCall();
  return result;
}

Polycube::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedInfo, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedInfo* req,
             ::commons::Bool* resp) {
               return service->Unsubscribe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Polycube::Service, ::commons::ToPolycubed, ::commons::ToServiced>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::commons::ToServiced,
             ::commons::ToPolycubed>* stream) {
               return service->Subscribe(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::Dataplane, ::commons::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::Dataplane* req,
             ::commons::Empty* resp) {
               return service->Reload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::CubeManagement, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::CubeManagement* req,
             ::commons::Bool* resp) {
               return service->DestroyCube(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::CubeManagement, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::CubeManagement* req,
             ::commons::Bool* resp) {
               return service->CreateCube(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ToPolycubed, ::commons::ToServiced, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ToPolycubed* req,
             ::commons::ToServiced* resp) {
               return service->SimpleUnaryMethod(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::Bool* resp) {
               return service->TableSet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::MapValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::MapValue* resp) {
               return service->TableGetAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::MapValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::MapValue* resp) {
               return service->TableGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::Bool* resp) {
               return service->TableRemove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::Bool* resp) {
               return service->TableRemoveAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::Bool* resp) {
               return service->SetPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::Bool* resp) {
               return service->DelPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Polycube_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Polycube::Service, ::commons::ServicedToDataplaneRequest, ::commons::Bool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Polycube::Service* service,
             ::grpc::ServerContext* ctx,
             const ::commons::ServicedToDataplaneRequest* req,
             ::commons::Bool* resp) {
               return service->SetPeer(ctx, req, resp);
             }, this)));
}

Polycube::Service::~Service() {
}

::grpc::Status Polycube::Service::Unsubscribe(::grpc::ServerContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::Subscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::Reload(::grpc::ServerContext* context, const ::commons::Dataplane* request, ::commons::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::DestroyCube(::grpc::ServerContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::CreateCube(::grpc::ServerContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::SimpleUnaryMethod(::grpc::ServerContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::TableSet(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::TableGetAll(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::TableGet(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::TableRemove(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::TableRemoveAll(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::SetPort(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::DelPort(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Polycube::Service::SetPeer(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace commons

