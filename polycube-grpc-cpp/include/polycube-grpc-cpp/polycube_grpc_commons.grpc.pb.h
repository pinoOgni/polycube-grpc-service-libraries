// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: polycube_grpc_commons.proto
#ifndef GRPC_polycube_5fgrpc_5fcommons_2eproto__INCLUDED
#define GRPC_polycube_5fgrpc_5fcommons_2eproto__INCLUDED

#include "polycube_grpc_commons.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace commons {

class Polycube final {
 public:
  static constexpr char const* service_full_name() {
    return "commons.Polycube";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // ====================================================================================================
    // SERVICE MANAGEMENT CALLS
    // ====================================================================================================
    virtual ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>> Subscribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>>(SubscribeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>> AsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>>(AsyncSubscribeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>> PrepareAsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>>(PrepareAsyncSubscribeRaw(context, cq));
    }
    //
    // ====================================================================================================
    // CUBE MANAGEMENT CALLS
    // ====================================================================================================
    virtual ::grpc::Status Reload(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::commons::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Empty>> AsyncReload(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Empty>>(AsyncReloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Empty>> PrepareAsyncReload(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Empty>>(PrepareAsyncReloadRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncDestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncDestroyCubeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncDestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncDestroyCubeRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncCreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncCreateCubeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncCreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncCreateCubeRaw(context, request, cq));
    }
    //
    // ====================================================================================================
    // TODO OR MAYBE TODO
    // ====================================================================================================
    virtual ::grpc::Status SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::commons::ToServiced* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::ToServiced>> AsyncSimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::ToServiced>>(AsyncSimpleUnaryMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::ToServiced>> PrepareAsyncSimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::ToServiced>>(PrepareAsyncSimpleUnaryMethodRaw(context, request, cq));
    }
    //
    // ====================================================================================================
    // EBPF MAP MANAGEMENT CALLS
    // ====================================================================================================
    //
    // https://www.bouncybouncy.net/blog/bpf_map_get_next_key-pitfalls/
    virtual ::grpc::Status TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncTableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncTableSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncTableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncTableSetRaw(context, request, cq));
    }
    virtual ::grpc::Status TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::MapValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>> AsyncTableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>>(AsyncTableGetAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>> PrepareAsyncTableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>>(PrepareAsyncTableGetAllRaw(context, request, cq));
    }
    virtual ::grpc::Status TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::MapValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>> AsyncTableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>>(AsyncTableGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>> PrepareAsyncTableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>>(PrepareAsyncTableGetRaw(context, request, cq));
    }
    virtual ::grpc::Status TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncTableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncTableRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncTableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncTableRemoveRaw(context, request, cq));
    }
    virtual ::grpc::Status TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncTableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncTableRemoveAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncTableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncTableRemoveAllRaw(context, request, cq));
    }
    //
    // ====================================================================================================
    // PORT MANAGEMENT CALLS
    // ====================================================================================================
    virtual ::grpc::Status SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncSetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncSetPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncSetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncSetPortRaw(context, request, cq));
    }
    virtual ::grpc::Status DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncDelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncDelPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncDelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncDelPortRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> AsyncSetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(AsyncSetPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>> PrepareAsyncSetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>>(PrepareAsyncSetPeerRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // ====================================================================================================
      // SERVICE MANAGEMENT CALLS
      // ====================================================================================================
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Subscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::commons::ToPolycubed,::commons::ToServiced>* reactor) = 0;
      #else
      virtual void Subscribe(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::commons::ToPolycubed,::commons::ToServiced>* reactor) = 0;
      #endif
      //
      // ====================================================================================================
      // CUBE MANAGEMENT CALLS
      // ====================================================================================================
      virtual void Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // ====================================================================================================
      // TODO OR MAYBE TODO
      // ====================================================================================================
      virtual void SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // ====================================================================================================
      // EBPF MAP MANAGEMENT CALLS
      // ====================================================================================================
      //
      // https://www.bouncybouncy.net/blog/bpf_map_get_next_key-pitfalls/
      virtual void TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // ====================================================================================================
      // PORT MANAGEMENT CALLS
      // ====================================================================================================
      virtual void SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>* SubscribeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>* AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::commons::ToPolycubed, ::commons::ToServiced>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Empty>* AsyncReloadRaw(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Empty>* PrepareAsyncReloadRaw(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncDestroyCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncDestroyCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncCreateCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncCreateCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::ToServiced>* AsyncSimpleUnaryMethodRaw(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::ToServiced>* PrepareAsyncSimpleUnaryMethodRaw(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncTableSetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncTableSetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>* AsyncTableGetAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>* PrepareAsyncTableGetAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>* AsyncTableGetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::MapValue>* PrepareAsyncTableGetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncTableRemoveRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncTableRemoveRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncTableRemoveAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncTableRemoveAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncSetPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncSetPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncDelPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncDelPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* AsyncSetPeerRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::commons::Bool>* PrepareAsyncSetPeerRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>> Subscribe(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>>(SubscribeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>> AsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>>(AsyncSubscribeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>> PrepareAsyncSubscribe(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>>(PrepareAsyncSubscribeRaw(context, cq));
    }
    ::grpc::Status Reload(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::commons::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Empty>> AsyncReload(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Empty>>(AsyncReloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Empty>> PrepareAsyncReload(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Empty>>(PrepareAsyncReloadRaw(context, request, cq));
    }
    ::grpc::Status DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncDestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncDestroyCubeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncDestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncDestroyCubeRaw(context, request, cq));
    }
    ::grpc::Status CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncCreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncCreateCubeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncCreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncCreateCubeRaw(context, request, cq));
    }
    ::grpc::Status SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::commons::ToServiced* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::ToServiced>> AsyncSimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::ToServiced>>(AsyncSimpleUnaryMethodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::ToServiced>> PrepareAsyncSimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::ToServiced>>(PrepareAsyncSimpleUnaryMethodRaw(context, request, cq));
    }
    ::grpc::Status TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncTableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncTableSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncTableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncTableSetRaw(context, request, cq));
    }
    ::grpc::Status TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::MapValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>> AsyncTableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>>(AsyncTableGetAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>> PrepareAsyncTableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>>(PrepareAsyncTableGetAllRaw(context, request, cq));
    }
    ::grpc::Status TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::MapValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>> AsyncTableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>>(AsyncTableGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>> PrepareAsyncTableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::MapValue>>(PrepareAsyncTableGetRaw(context, request, cq));
    }
    ::grpc::Status TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncTableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncTableRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncTableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncTableRemoveRaw(context, request, cq));
    }
    ::grpc::Status TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncTableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncTableRemoveAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncTableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncTableRemoveAllRaw(context, request, cq));
    }
    ::grpc::Status SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncSetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncSetPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncSetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncSetPortRaw(context, request, cq));
    }
    ::grpc::Status DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncDelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncDelPortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncDelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncDelPortRaw(context, request, cq));
    }
    ::grpc::Status SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::commons::Bool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> AsyncSetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(AsyncSetPeerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>> PrepareAsyncSetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::commons::Bool>>(PrepareAsyncSetPeerRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Unsubscribe(::grpc::ClientContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Subscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::commons::ToPolycubed,::commons::ToServiced>* reactor) override;
      #else
      void Subscribe(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::commons::ToPolycubed,::commons::ToServiced>* reactor) override;
      #endif
      void Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Reload(::grpc::ClientContext* context, const ::commons::Dataplane* request, ::commons::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DestroyCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCube(::grpc::ClientContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SimpleUnaryMethod(::grpc::ClientContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TableSet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TableGetAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TableGet(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TableRemove(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TableRemoveAll(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DelPort(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPeer(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::commons::ServicedInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>* SubscribeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>* AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::commons::ToPolycubed, ::commons::ToServiced>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Empty>* AsyncReloadRaw(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Empty>* PrepareAsyncReloadRaw(::grpc::ClientContext* context, const ::commons::Dataplane& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncDestroyCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncDestroyCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncCreateCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncCreateCubeRaw(::grpc::ClientContext* context, const ::commons::CubeManagement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::ToServiced>* AsyncSimpleUnaryMethodRaw(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::ToServiced>* PrepareAsyncSimpleUnaryMethodRaw(::grpc::ClientContext* context, const ::commons::ToPolycubed& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncTableSetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncTableSetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::MapValue>* AsyncTableGetAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::MapValue>* PrepareAsyncTableGetAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::MapValue>* AsyncTableGetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::MapValue>* PrepareAsyncTableGetRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncTableRemoveRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncTableRemoveRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncTableRemoveAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncTableRemoveAllRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncSetPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncSetPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncDelPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncDelPortRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* AsyncSetPeerRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::commons::Bool>* PrepareAsyncSetPeerRaw(::grpc::ClientContext* context, const ::commons::ServicedToDataplaneRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Unsubscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Reload_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyCube_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCube_;
    const ::grpc::internal::RpcMethod rpcmethod_SimpleUnaryMethod_;
    const ::grpc::internal::RpcMethod rpcmethod_TableSet_;
    const ::grpc::internal::RpcMethod rpcmethod_TableGetAll_;
    const ::grpc::internal::RpcMethod rpcmethod_TableGet_;
    const ::grpc::internal::RpcMethod rpcmethod_TableRemove_;
    const ::grpc::internal::RpcMethod rpcmethod_TableRemoveAll_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPort_;
    const ::grpc::internal::RpcMethod rpcmethod_DelPort_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPeer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // ====================================================================================================
    // SERVICE MANAGEMENT CALLS
    // ====================================================================================================
    virtual ::grpc::Status Unsubscribe(::grpc::ServerContext* context, const ::commons::ServicedInfo* request, ::commons::Bool* response);
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* stream);
    //
    // ====================================================================================================
    // CUBE MANAGEMENT CALLS
    // ====================================================================================================
    virtual ::grpc::Status Reload(::grpc::ServerContext* context, const ::commons::Dataplane* request, ::commons::Empty* response);
    virtual ::grpc::Status DestroyCube(::grpc::ServerContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response);
    virtual ::grpc::Status CreateCube(::grpc::ServerContext* context, const ::commons::CubeManagement* request, ::commons::Bool* response);
    //
    // ====================================================================================================
    // TODO OR MAYBE TODO
    // ====================================================================================================
    virtual ::grpc::Status SimpleUnaryMethod(::grpc::ServerContext* context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response);
    //
    // ====================================================================================================
    // EBPF MAP MANAGEMENT CALLS
    // ====================================================================================================
    //
    // https://www.bouncybouncy.net/blog/bpf_map_get_next_key-pitfalls/
    virtual ::grpc::Status TableSet(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response);
    virtual ::grpc::Status TableGetAll(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response);
    virtual ::grpc::Status TableGet(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response);
    virtual ::grpc::Status TableRemove(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response);
    virtual ::grpc::Status TableRemoveAll(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response);
    //
    // ====================================================================================================
    // PORT MANAGEMENT CALLS
    // ====================================================================================================
    virtual ::grpc::Status SetPort(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response);
    virtual ::grpc::Status DelPort(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response);
    virtual ::grpc::Status SetPeer(::grpc::ServerContext* context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::commons::ServicedInfo* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reload() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Reload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reload(::grpc::ServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReload(::grpc::ServerContext* context, ::commons::Dataplane* request, ::grpc::ServerAsyncResponseWriter< ::commons::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DestroyCube() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DestroyCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyCube(::grpc::ServerContext* context, ::commons::CubeManagement* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCube() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCube(::grpc::ServerContext* context, ::commons::CubeManagement* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SimpleUnaryMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SimpleUnaryMethod() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SimpleUnaryMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimpleUnaryMethod(::grpc::ServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimpleUnaryMethod(::grpc::ServerContext* context, ::commons::ToPolycubed* request, ::grpc::ServerAsyncResponseWriter< ::commons::ToServiced>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TableSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TableSet() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TableSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableSet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableSet(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TableGetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TableGetAll() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_TableGetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGetAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableGetAll(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::MapValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TableGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TableGet() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TableGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableGet(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::MapValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TableRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TableRemove() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_TableRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemove(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableRemove(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TableRemoveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TableRemoveAll() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_TableRemoveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemoveAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableRemoveAll(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPort() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPort(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelPort() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DelPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelPort(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPeer() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPeer(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPeer(::grpc::ServerContext* context, ::commons::ServicedToDataplaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::commons::Bool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Unsubscribe<WithAsyncMethod_Subscribe<WithAsyncMethod_Reload<WithAsyncMethod_DestroyCube<WithAsyncMethod_CreateCube<WithAsyncMethod_SimpleUnaryMethod<WithAsyncMethod_TableSet<WithAsyncMethod_TableGetAll<WithAsyncMethod_TableGet<WithAsyncMethod_TableRemove<WithAsyncMethod_TableRemoveAll<WithAsyncMethod_SetPort<WithAsyncMethod_DelPort<WithAsyncMethod_SetPeer<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Unsubscribe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedInfo, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedInfo* request, ::commons::Bool* response) { return this->Unsubscribe(context, request, response); }));}
    void SetMessageAllocatorFor_Unsubscribe(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedInfo, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedInfo, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unsubscribe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Subscribe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::commons::ToPolycubed, ::commons::ToServiced>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Subscribe(context); }));
    }
    ~ExperimentalWithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::commons::ToPolycubed, ::commons::ToServiced>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::commons::ToPolycubed, ::commons::ToServiced>* Subscribe(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Reload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Reload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::Dataplane, ::commons::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::Dataplane* request, ::commons::Empty* response) { return this->Reload(context, request, response); }));}
    void SetMessageAllocatorFor_Reload(
        ::grpc::experimental::MessageAllocator< ::commons::Dataplane, ::commons::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::Dataplane, ::commons::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Reload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reload(::grpc::ServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reload(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reload(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DestroyCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DestroyCube() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::CubeManagement, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::CubeManagement* request, ::commons::Bool* response) { return this->DestroyCube(context, request, response); }));}
    void SetMessageAllocatorFor_DestroyCube(
        ::grpc::experimental::MessageAllocator< ::commons::CubeManagement, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::CubeManagement, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DestroyCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DestroyCube(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DestroyCube(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateCube() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::CubeManagement, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::CubeManagement* request, ::commons::Bool* response) { return this->CreateCube(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCube(
        ::grpc::experimental::MessageAllocator< ::commons::CubeManagement, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::CubeManagement, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCube(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCube(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SimpleUnaryMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SimpleUnaryMethod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ToPolycubed, ::commons::ToServiced>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ToPolycubed* request, ::commons::ToServiced* response) { return this->SimpleUnaryMethod(context, request, response); }));}
    void SetMessageAllocatorFor_SimpleUnaryMethod(
        ::grpc::experimental::MessageAllocator< ::commons::ToPolycubed, ::commons::ToServiced>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ToPolycubed, ::commons::ToServiced>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SimpleUnaryMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimpleUnaryMethod(::grpc::ServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SimpleUnaryMethod(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SimpleUnaryMethod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TableSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TableSet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) { return this->TableSet(context, request, response); }));}
    void SetMessageAllocatorFor_TableSet(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TableSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableSet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableSet(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableSet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TableGetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TableGetAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::MapValue>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response) { return this->TableGetAll(context, request, response); }));}
    void SetMessageAllocatorFor_TableGetAll(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::MapValue>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::MapValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TableGetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGetAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableGetAll(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableGetAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TableGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TableGet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::MapValue>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::MapValue* response) { return this->TableGet(context, request, response); }));}
    void SetMessageAllocatorFor_TableGet(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::MapValue>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::MapValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TableGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableGet(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableGet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TableRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TableRemove() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) { return this->TableRemove(context, request, response); }));}
    void SetMessageAllocatorFor_TableRemove(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TableRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemove(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableRemove(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableRemove(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TableRemoveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TableRemoveAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) { return this->TableRemoveAll(context, request, response); }));}
    void SetMessageAllocatorFor_TableRemoveAll(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TableRemoveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemoveAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableRemoveAll(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableRemoveAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) { return this->SetPort(context, request, response); }));}
    void SetMessageAllocatorFor_SetPort(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPort(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DelPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DelPort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) { return this->DelPort(context, request, response); }));}
    void SetMessageAllocatorFor_DelPort(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DelPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DelPort(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DelPort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPeer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::commons::ServicedToDataplaneRequest* request, ::commons::Bool* response) { return this->SetPeer(context, request, response); }));}
    void SetMessageAllocatorFor_SetPeer(
        ::grpc::experimental::MessageAllocator< ::commons::ServicedToDataplaneRequest, ::commons::Bool>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::commons::ServicedToDataplaneRequest, ::commons::Bool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPeer(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPeer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Unsubscribe<ExperimentalWithCallbackMethod_Subscribe<ExperimentalWithCallbackMethod_Reload<ExperimentalWithCallbackMethod_DestroyCube<ExperimentalWithCallbackMethod_CreateCube<ExperimentalWithCallbackMethod_SimpleUnaryMethod<ExperimentalWithCallbackMethod_TableSet<ExperimentalWithCallbackMethod_TableGetAll<ExperimentalWithCallbackMethod_TableGet<ExperimentalWithCallbackMethod_TableRemove<ExperimentalWithCallbackMethod_TableRemoveAll<ExperimentalWithCallbackMethod_SetPort<ExperimentalWithCallbackMethod_DelPort<ExperimentalWithCallbackMethod_SetPeer<Service > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Unsubscribe<ExperimentalWithCallbackMethod_Subscribe<ExperimentalWithCallbackMethod_Reload<ExperimentalWithCallbackMethod_DestroyCube<ExperimentalWithCallbackMethod_CreateCube<ExperimentalWithCallbackMethod_SimpleUnaryMethod<ExperimentalWithCallbackMethod_TableSet<ExperimentalWithCallbackMethod_TableGetAll<ExperimentalWithCallbackMethod_TableGet<ExperimentalWithCallbackMethod_TableRemove<ExperimentalWithCallbackMethod_TableRemoveAll<ExperimentalWithCallbackMethod_SetPort<ExperimentalWithCallbackMethod_DelPort<ExperimentalWithCallbackMethod_SetPeer<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reload() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Reload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reload(::grpc::ServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DestroyCube() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DestroyCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCube() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SimpleUnaryMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SimpleUnaryMethod() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SimpleUnaryMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimpleUnaryMethod(::grpc::ServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TableSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TableSet() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TableSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableSet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TableGetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TableGetAll() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_TableGetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGetAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TableGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TableGet() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TableGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TableRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TableRemove() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_TableRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemove(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TableRemoveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TableRemoveAll() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_TableRemoveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemoveAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPort() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelPort() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DelPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPeer() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPeer(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reload() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Reload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reload(::grpc::ServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DestroyCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DestroyCube() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DestroyCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyCube(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCube() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCube(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SimpleUnaryMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SimpleUnaryMethod() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SimpleUnaryMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimpleUnaryMethod(::grpc::ServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimpleUnaryMethod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TableSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TableSet() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TableSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableSet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TableGetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TableGetAll() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_TableGetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGetAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableGetAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TableGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TableGet() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_TableGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TableRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TableRemove() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_TableRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemove(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableRemove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TableRemoveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TableRemoveAll() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_TableRemoveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemoveAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTableRemoveAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPort() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelPort() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DelPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelPort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPeer() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPeer(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPeer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Unsubscribe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unsubscribe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Unsubscribe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Subscribe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Subscribe(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::commons::ToServiced, ::commons::ToPolycubed>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Subscribe(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Reload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Reload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reload(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Reload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reload(::grpc::ServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Reload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Reload(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DestroyCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DestroyCube() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DestroyCube(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DestroyCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DestroyCube(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DestroyCube(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCube() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCube(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCube(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCube(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SimpleUnaryMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SimpleUnaryMethod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SimpleUnaryMethod(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SimpleUnaryMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SimpleUnaryMethod(::grpc::ServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SimpleUnaryMethod(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SimpleUnaryMethod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TableSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TableSet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TableSet(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TableSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableSet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableSet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableSet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TableGetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TableGetAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TableGetAll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TableGetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGetAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableGetAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableGetAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TableGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TableGet() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TableGet(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TableGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableGet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableGet(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TableRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TableRemove() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TableRemove(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TableRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemove(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableRemove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableRemove(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TableRemoveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TableRemoveAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TableRemoveAll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TableRemoveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TableRemoveAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TableRemoveAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TableRemoveAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPort(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DelPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DelPort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelPort(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DelPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DelPort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DelPort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPeer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPeer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPeer(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPeer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPeer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedInfo, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedInfo, ::commons::Bool>* streamer) {
                       return this->StreamedUnsubscribe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::commons::ServicedInfo* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnsubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedInfo,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reload() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::Dataplane, ::commons::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::Dataplane, ::commons::Empty>* streamer) {
                       return this->StreamedReload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reload(::grpc::ServerContext* /*context*/, const ::commons::Dataplane* /*request*/, ::commons::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::Dataplane,::commons::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DestroyCube() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::CubeManagement, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::CubeManagement, ::commons::Bool>* streamer) {
                       return this->StreamedDestroyCube(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DestroyCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyCube(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::CubeManagement,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCube : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCube() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::CubeManagement, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::CubeManagement, ::commons::Bool>* streamer) {
                       return this->StreamedCreateCube(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCube() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCube(::grpc::ServerContext* /*context*/, const ::commons::CubeManagement* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCube(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::CubeManagement,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SimpleUnaryMethod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SimpleUnaryMethod() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ToPolycubed, ::commons::ToServiced>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ToPolycubed, ::commons::ToServiced>* streamer) {
                       return this->StreamedSimpleUnaryMethod(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SimpleUnaryMethod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SimpleUnaryMethod(::grpc::ServerContext* /*context*/, const ::commons::ToPolycubed* /*request*/, ::commons::ToServiced* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimpleUnaryMethod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ToPolycubed,::commons::ToServiced>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TableSet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TableSet() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::Bool>* streamer) {
                       return this->StreamedTableSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TableSet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TableSet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTableSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TableGetAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TableGetAll() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::MapValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::MapValue>* streamer) {
                       return this->StreamedTableGetAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TableGetAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TableGetAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTableGetAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::MapValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TableGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TableGet() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::MapValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::MapValue>* streamer) {
                       return this->StreamedTableGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TableGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TableGet(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::MapValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTableGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::MapValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TableRemove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TableRemove() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::Bool>* streamer) {
                       return this->StreamedTableRemove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TableRemove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TableRemove(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTableRemove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TableRemoveAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TableRemoveAll() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::Bool>* streamer) {
                       return this->StreamedTableRemoveAll(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TableRemoveAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TableRemoveAll(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTableRemoveAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPort() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::Bool>* streamer) {
                       return this->StreamedSetPort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelPort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelPort() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::Bool>* streamer) {
                       return this->StreamedDelPort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelPort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelPort(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelPort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::Bool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPeer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPeer() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::commons::ServicedToDataplaneRequest, ::commons::Bool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::commons::ServicedToDataplaneRequest, ::commons::Bool>* streamer) {
                       return this->StreamedSetPeer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPeer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPeer(::grpc::ServerContext* /*context*/, const ::commons::ServicedToDataplaneRequest* /*request*/, ::commons::Bool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPeer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::commons::ServicedToDataplaneRequest,::commons::Bool>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Unsubscribe<WithStreamedUnaryMethod_Reload<WithStreamedUnaryMethod_DestroyCube<WithStreamedUnaryMethod_CreateCube<WithStreamedUnaryMethod_SimpleUnaryMethod<WithStreamedUnaryMethod_TableSet<WithStreamedUnaryMethod_TableGetAll<WithStreamedUnaryMethod_TableGet<WithStreamedUnaryMethod_TableRemove<WithStreamedUnaryMethod_TableRemoveAll<WithStreamedUnaryMethod_SetPort<WithStreamedUnaryMethod_DelPort<WithStreamedUnaryMethod_SetPeer<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Unsubscribe<WithStreamedUnaryMethod_Reload<WithStreamedUnaryMethod_DestroyCube<WithStreamedUnaryMethod_CreateCube<WithStreamedUnaryMethod_SimpleUnaryMethod<WithStreamedUnaryMethod_TableSet<WithStreamedUnaryMethod_TableGetAll<WithStreamedUnaryMethod_TableGet<WithStreamedUnaryMethod_TableRemove<WithStreamedUnaryMethod_TableRemoveAll<WithStreamedUnaryMethod_SetPort<WithStreamedUnaryMethod_DelPort<WithStreamedUnaryMethod_SetPeer<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace commons


#endif  // GRPC_polycube_5fgrpc_5fcommons_2eproto__INCLUDED
