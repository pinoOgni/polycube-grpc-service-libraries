// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polycube_grpc_commons.proto

#include "polycube_grpc_commons.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace commons {
constexpr Empty::Empty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EmptyDefaultTypeInternal {
  constexpr EmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmptyDefaultTypeInternal _Empty_default_instance_;
constexpr Bool::Bool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(false){}
struct BoolDefaultTypeInternal {
  constexpr BoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoolDefaultTypeInternal() {}
  union {
    Bool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoolDefaultTypeInternal _Bool_default_instance_;
constexpr ServicedInfo::ServicedInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cube_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(0)
  , service_type_(0)
{}
struct ServicedInfoDefaultTypeInternal {
  constexpr ServicedInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServicedInfoDefaultTypeInternal() {}
  union {
    ServicedInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServicedInfoDefaultTypeInternal _ServicedInfo_default_instance_;
constexpr ToServiced::ToServiced(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serviced_info_(nullptr)
  , _oneof_case_{}{}
struct ToServicedDefaultTypeInternal {
  constexpr ToServicedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToServicedDefaultTypeInternal() {}
  union {
    ToServiced _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToServicedDefaultTypeInternal _ToServiced_default_instance_;
constexpr RestUserToServicedRequest::RestUserToServicedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : http_verb_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RestUserToServicedRequestDefaultTypeInternal {
  constexpr RestUserToServicedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestUserToServicedRequestDefaultTypeInternal() {}
  union {
    RestUserToServicedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestUserToServicedRequestDefaultTypeInternal _RestUserToServicedRequest_default_instance_;
constexpr DataplaneToServicedRequest::DataplaneToServicedRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_()
  , controlplane_method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DataplaneToServicedRequestDefaultTypeInternal {
  constexpr DataplaneToServicedRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataplaneToServicedRequestDefaultTypeInternal() {}
  union {
    DataplaneToServicedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataplaneToServicedRequestDefaultTypeInternal _DataplaneToServicedRequest_default_instance_;
constexpr DataplaneToServicedPacket::DataplaneToServicedPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_()
  , _metadata_cached_byte_size_(0)
  , packet_()
  , _packet_cached_byte_size_(0)
  , cube_id_(0u)
  , port_id_(0u)
  , packet_len_(0u)
  , traffic_class_(0u)
  , reason_(0u){}
struct DataplaneToServicedPacketDefaultTypeInternal {
  constexpr DataplaneToServicedPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataplaneToServicedPacketDefaultTypeInternal() {}
  union {
    DataplaneToServicedPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataplaneToServicedPacketDefaultTypeInternal _DataplaneToServicedPacket_default_instance_;
constexpr ToPolycubed::ToPolycubed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serviced_info_(nullptr)
  , _oneof_case_{}{}
struct ToPolycubedDefaultTypeInternal {
  constexpr ToPolycubedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ToPolycubedDefaultTypeInternal() {}
  union {
    ToPolycubed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ToPolycubedDefaultTypeInternal _ToPolycubed_default_instance_;
constexpr ServicedToDataplaneReply::ServicedToDataplaneReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServicedToDataplaneReplyDefaultTypeInternal {
  constexpr ServicedToDataplaneReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServicedToDataplaneReplyDefaultTypeInternal() {}
  union {
    ServicedToDataplaneReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServicedToDataplaneReplyDefaultTypeInternal _ServicedToDataplaneReply_default_instance_;
constexpr ServicedToRestUserReply::ServicedToRestUserReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServicedToRestUserReplyDefaultTypeInternal {
  constexpr ServicedToRestUserReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServicedToRestUserReplyDefaultTypeInternal() {}
  union {
    ServicedToRestUserReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServicedToRestUserReplyDefaultTypeInternal _ServicedToRestUserReply_default_instance_;
constexpr ServicedToDataplaneRequest::ServicedToDataplaneRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serviced_info_(nullptr)
  , cube_info_(nullptr)
  , _oneof_case_{}{}
struct ServicedToDataplaneRequestDefaultTypeInternal {
  constexpr ServicedToDataplaneRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServicedToDataplaneRequestDefaultTypeInternal() {}
  union {
    ServicedToDataplaneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServicedToDataplaneRequestDefaultTypeInternal _ServicedToDataplaneRequest_default_instance_;
constexpr CubeInfo::CubeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cube_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0)
  , program_type_(0)
{}
struct CubeInfoDefaultTypeInternal {
  constexpr CubeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CubeInfoDefaultTypeInternal() {}
  union {
    CubeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CubeInfoDefaultTypeInternal _CubeInfo_default_instance_;
constexpr CubeManagement::CubeManagement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cube_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ingress_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , egress_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loglevel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , conf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uuid_(0)
  , service_type_(0)
{}
struct CubeManagementDefaultTypeInternal {
  constexpr CubeManagementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CubeManagementDefaultTypeInternal() {}
  union {
    CubeManagement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CubeManagementDefaultTypeInternal _CubeManagement_default_instance_;
constexpr Port::Port(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , peer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_status_(0)

  , port_type_(0)
{}
struct PortDefaultTypeInternal {
  constexpr PortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortDefaultTypeInternal() {}
  union {
    Port _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortDefaultTypeInternal _Port_default_instance_;
constexpr MapValue::MapValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bytevalues_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , leaf_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_size_(uint64_t{0u})
  , leaf_size_(uint64_t{0u})
  , type_(0)
  , flags_(0)
  , max_entries_(uint64_t{0u})
  , counter_(0){}
struct MapValueDefaultTypeInternal {
  constexpr MapValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapValueDefaultTypeInternal() {}
  union {
    MapValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapValueDefaultTypeInternal _MapValue_default_instance_;
constexpr SetRequest::SetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_size_(uint64_t{0u})
  , value_size_(uint64_t{0u}){}
struct SetRequestDefaultTypeInternal {
  constexpr SetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRequestDefaultTypeInternal() {}
  union {
    SetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRequestDefaultTypeInternal _SetRequest_default_instance_;
constexpr GetRequest::GetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_size_(uint64_t{0u})
  , value_size_(uint64_t{0u})
  , all_(false){}
struct GetRequestDefaultTypeInternal {
  constexpr GetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRequestDefaultTypeInternal _GetRequest_default_instance_;
constexpr RemoveRequest::RemoveRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_size_(uint64_t{0u})
  , all_(false){}
struct RemoveRequestDefaultTypeInternal {
  constexpr RemoveRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveRequestDefaultTypeInternal() {}
  union {
    RemoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveRequestDefaultTypeInternal _RemoveRequest_default_instance_;
constexpr Index::Index(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0){}
struct IndexDefaultTypeInternal {
  constexpr IndexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexDefaultTypeInternal() {}
  union {
    Index _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexDefaultTypeInternal _Index_default_instance_;
constexpr Dataplane::Dataplane(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cube_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0)
  , program_type_(0)
{}
struct DataplaneDefaultTypeInternal {
  constexpr DataplaneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataplaneDefaultTypeInternal() {}
  union {
    Dataplane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataplaneDefaultTypeInternal _Dataplane_default_instance_;
}  // namespace commons
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_polycube_5fgrpc_5fcommons_2eproto = nullptr;

const uint32_t TableStruct_polycube_5fgrpc_5fcommons_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::Bool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::Bool, status_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, service_name_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, uuid_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, service_type_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, cube_name_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, port_name_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedInfo, peer_name_),
  ~0u,
  ~0u,
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::ToServiced, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::commons::ToServiced, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::ToServiced, serviced_info_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::commons::ToServiced, to_serviced_),
  PROTOBUF_FIELD_OFFSET(::commons::RestUserToServicedRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::RestUserToServicedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::RestUserToServicedRequest, http_verb_),
  PROTOBUF_FIELD_OFFSET(::commons::RestUserToServicedRequest, url_),
  PROTOBUF_FIELD_OFFSET(::commons::RestUserToServicedRequest, request_body_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedRequest, controlplane_method_),
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedRequest, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, cube_id_),
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, port_id_),
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, packet_len_),
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, traffic_class_),
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, reason_),
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, metadata_),
  PROTOBUF_FIELD_OFFSET(::commons::DataplaneToServicedPacket, packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::ToPolycubed, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::commons::ToPolycubed, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::ToPolycubed, serviced_info_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::commons::ToPolycubed, to_polycubed_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneReply, success_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneReply, message_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToRestUserReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToRestUserReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToRestUserReply, success_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToRestUserReply, message_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneRequest, serviced_info_),
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneRequest, cube_info_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::commons::ServicedToDataplaneRequest, request_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::CubeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::CubeInfo, cube_name_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeInfo, map_name_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeInfo, index_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeInfo, program_type_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, cube_name_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, service_name_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, uuid_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, service_type_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, ingress_code_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, egress_code_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, loglevel_),
  PROTOBUF_FIELD_OFFSET(::commons::CubeManagement, conf_),
  ~0u,
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::commons::Port, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::Port, name_),
  PROTOBUF_FIELD_OFFSET(::commons::Port, peer_),
  PROTOBUF_FIELD_OFFSET(::commons::Port, port_status_),
  PROTOBUF_FIELD_OFFSET(::commons::Port, port_type_),
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, bytevalues_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, name_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, type_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, key_size_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, leaf_size_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, max_entries_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, flags_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, key_desc_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, leaf_desc_),
  PROTOBUF_FIELD_OFFSET(::commons::MapValue, counter_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::SetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::SetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::commons::SetRequest, key_size_),
  PROTOBUF_FIELD_OFFSET(::commons::SetRequest, value_),
  PROTOBUF_FIELD_OFFSET(::commons::SetRequest, value_size_),
  PROTOBUF_FIELD_OFFSET(::commons::GetRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::GetRequest, all_),
  PROTOBUF_FIELD_OFFSET(::commons::GetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::commons::GetRequest, key_size_),
  PROTOBUF_FIELD_OFFSET(::commons::GetRequest, value_size_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::RemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::RemoveRequest, all_),
  PROTOBUF_FIELD_OFFSET(::commons::RemoveRequest, key_),
  PROTOBUF_FIELD_OFFSET(::commons::RemoveRequest, key_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::commons::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::Index, index_),
  PROTOBUF_FIELD_OFFSET(::commons::Dataplane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::commons::Dataplane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::commons::Dataplane, cube_name_),
  PROTOBUF_FIELD_OFFSET(::commons::Dataplane, code_),
  PROTOBUF_FIELD_OFFSET(::commons::Dataplane, index_),
  PROTOBUF_FIELD_OFFSET(::commons::Dataplane, program_type_),
  ~0u,
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::commons::Empty)},
  { 6, -1, -1, sizeof(::commons::Bool)},
  { 13, 25, -1, sizeof(::commons::ServicedInfo)},
  { 31, -1, -1, sizeof(::commons::ToServiced)},
  { 42, 51, -1, sizeof(::commons::RestUserToServicedRequest)},
  { 54, -1, -1, sizeof(::commons::DataplaneToServicedRequest)},
  { 62, -1, -1, sizeof(::commons::DataplaneToServicedPacket)},
  { 75, -1, -1, sizeof(::commons::ToPolycubed)},
  { 86, 94, -1, sizeof(::commons::ServicedToDataplaneReply)},
  { 96, 104, -1, sizeof(::commons::ServicedToRestUserReply)},
  { 106, -1, -1, sizeof(::commons::ServicedToDataplaneRequest)},
  { 119, -1, -1, sizeof(::commons::CubeInfo)},
  { 129, 143, -1, sizeof(::commons::CubeManagement)},
  { 151, 161, -1, sizeof(::commons::Port)},
  { 165, 181, -1, sizeof(::commons::MapValue)},
  { 191, -1, -1, sizeof(::commons::SetRequest)},
  { 201, 211, -1, sizeof(::commons::GetRequest)},
  { 215, -1, -1, sizeof(::commons::RemoveRequest)},
  { 224, -1, -1, sizeof(::commons::Index)},
  { 231, 241, -1, sizeof(::commons::Dataplane)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_Bool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_ServicedInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_ToServiced_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_RestUserToServicedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_DataplaneToServicedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_DataplaneToServicedPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_ToPolycubed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_ServicedToDataplaneReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_ServicedToRestUserReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_ServicedToDataplaneRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_CubeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_CubeManagement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_Port_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_MapValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_SetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_RemoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_Index_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::commons::_Dataplane_default_instance_),
};

const char descriptor_table_protodef_polycube_5fgrpc_5fcommons_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033polycube_grpc_commons.proto\022\007commons\"\007"
  "\n\005Empty\"\026\n\004Bool\022\016\n\006status\030\001 \001(\010\"\241\002\n\014Serv"
  "icedInfo\022\024\n\014service_name\030\001 \001(\t\022\014\n\004uuid\030\002"
  " \001(\005\022<\n\014service_type\030\003 \001(\0162!.commons.Ser"
  "vicedInfo.ServiceTypeH\000\210\001\001\022\026\n\tcube_name\030"
  "\004 \001(\tH\001\210\001\001\022\026\n\tport_name\030\005 \001(\tH\002\210\001\001\022\026\n\tpe"
  "er_name\030\006 \001(\tH\003\210\001\001\",\n\013ServiceType\022\014\n\010STA"
  "NDARD\020\000\022\017\n\013TRANSPARENT\020\001B\017\n\r_service_typ"
  "eB\014\n\n_cube_nameB\014\n\n_port_nameB\014\n\n_peer_n"
  "ame\"\257\002\n\nToServiced\022,\n\rserviced_info\030\001 \001("
  "\0132\025.commons.ServicedInfo\022L\n\035dataplane_to"
  "_serviced_request\030\002 \001(\0132#.commons.Datapl"
  "aneToServicedRequestH\000\022J\n\034rest_user_to_s"
  "ervice_request\030\003 \001(\0132\".commons.RestUserT"
  "oServicedRequestH\000\022J\n\034dataplane_to_servi"
  "ced_packet\030\004 \001(\0132\".commons.DataplaneToSe"
  "rvicedPacketH\000B\r\n\013to_serviced\"g\n\031RestUse"
  "rToServicedRequest\022\021\n\thttp_verb\030\001 \001(\t\022\013\n"
  "\003url\030\002 \001(\t\022\031\n\014request_body\030\003 \001(\tH\000\210\001\001B\017\n"
  "\r_request_body\"M\n\032DataplaneToServicedReq"
  "uest\022\033\n\023controlplane_method\030\001 \001(\t\022\022\n\npar"
  "ameters\030\002 \003(\014\"\232\001\n\031DataplaneToServicedPac"
  "ket\022\017\n\007cube_id\030\001 \001(\r\022\017\n\007port_id\030\002 \001(\r\022\022\n"
  "\npacket_len\030\003 \001(\r\022\025\n\rtraffic_class\030\004 \001(\r"
  "\022\016\n\006reason\030\005 \001(\r\022\020\n\010metadata\030\006 \003(\r\022\016\n\006pa"
  "cket\030\007 \003(\r\"\363\001\n\013ToPolycubed\022,\n\rserviced_i"
  "nfo\030\001 \001(\0132\025.commons.ServicedInfo\022\023\n\tsubs"
  "cribe\030\002 \001(\010H\000\022H\n\033serviced_to_dataplane_r"
  "eply\030\003 \001(\0132!.commons.ServicedToDataplane"
  "ReplyH\000\022G\n\033serviced_to_rest_user_reply\030\004"
  " \001(\0132 .commons.ServicedToRestUserReplyH\000"
  "B\016\n\014to_polycubed\"M\n\030ServicedToDataplaneR"
  "eply\022\017\n\007success\030\001 \001(\010\022\024\n\007message\030\002 \001(\tH\000"
  "\210\001\001B\n\n\010_message\"L\n\027ServicedToRestUserRep"
  "ly\022\017\n\007success\030\001 \001(\010\022\024\n\007message\030\002 \001(\tH\000\210\001"
  "\001B\n\n\010_message\"\251\002\n\032ServicedToDataplaneReq"
  "uest\022,\n\rserviced_info\030\001 \001(\0132\025.commons.Se"
  "rvicedInfo\022$\n\tcube_info\030\002 \001(\0132\021.commons."
  "CubeInfo\022*\n\013set_request\030\003 \001(\0132\023.commons."
  "SetRequestH\000\022*\n\013get_request\030\004 \001(\0132\023.comm"
  "ons.GetRequestH\000\0220\n\016remove_request\030\005 \001(\013"
  "2\026.commons.RemoveRequestH\000\022\035\n\004port\030\006 \001(\013"
  "2\r.commons.PortH\000B\016\n\014request_type\"\233\001\n\010Cu"
  "beInfo\022\021\n\tcube_name\030\001 \001(\t\022\020\n\010map_name\030\002 "
  "\001(\t\022\r\n\005index\030\003 \001(\005\0223\n\014program_type\030\004 \001(\016"
  "2\035.commons.CubeInfo.ProgramType\"&\n\013Progr"
  "amType\022\013\n\007INGRESS\020\000\022\n\n\006EGRESS\020\001\"\200\003\n\016Cube"
  "Management\022\021\n\tcube_name\030\001 \001(\t\022\031\n\014service"
  "_name\030\002 \001(\tH\000\210\001\001\022\021\n\004uuid\030\003 \001(\005H\001\210\001\001\022>\n\014s"
  "ervice_type\030\004 \001(\0162#.commons.CubeManageme"
  "nt.ServiceTypeH\002\210\001\001\022\031\n\014ingress_code\030\005 \001("
  "\tH\003\210\001\001\022\030\n\013egress_code\030\006 \001(\tH\004\210\001\001\022\025\n\010logl"
  "evel\030\007 \001(\tH\005\210\001\001\022\021\n\004conf\030\010 \001(\tH\006\210\001\001\",\n\013Se"
  "rviceType\022\014\n\010STANDARD\020\000\022\017\n\013TRANSPARENT\020\001"
  "B\017\n\r_service_nameB\007\n\005_uuidB\017\n\r_service_t"
  "ypeB\017\n\r_ingress_codeB\016\n\014_egress_codeB\013\n\t"
  "_loglevelB\007\n\005_conf\"\307\001\n\004Port\022\014\n\004name\030\001 \001("
  "\t\022\021\n\004peer\030\002 \001(\tH\000\210\001\001\022-\n\013port_status\030\003 \001("
  "\0162\030.commons.Port.PortStatus\022)\n\tport_type"
  "\030\004 \001(\0162\026.commons.Port.PortType\"\036\n\nPortSt"
  "atus\022\010\n\004DOWN\020\000\022\006\n\002UP\020\001\"\033\n\010PortType\022\006\n\002TC"
  "\020\000\022\007\n\003XDP\020\001B\007\n\005_peer\"\312\001\n\010MapValue\022\022\n\nbyt"
  "eValues\030\001 \001(\014\022\014\n\004name\030\002 \001(\t\022\014\n\004type\030\003 \001("
  "\005\022\020\n\010key_size\030\004 \001(\004\022\021\n\tleaf_size\030\005 \001(\004\022\023"
  "\n\013max_entries\030\006 \001(\004\022\r\n\005flags\030\007 \001(\005\022\020\n\010ke"
  "y_desc\030\010 \001(\t\022\021\n\tleaf_desc\030\t \001(\t\022\024\n\007count"
  "er\030\n \001(\005H\000\210\001\001B\n\n\010_counter\"N\n\nSetRequest\022"
  "\013\n\003key\030\001 \001(\014\022\020\n\010key_size\030\002 \001(\004\022\r\n\005value\030"
  "\003 \001(\014\022\022\n\nvalue_size\030\004 \001(\004\"Y\n\nGetRequest\022"
  "\013\n\003all\030\001 \001(\010\022\020\n\003key\030\002 \001(\014H\000\210\001\001\022\020\n\010key_si"
  "ze\030\003 \001(\004\022\022\n\nvalue_size\030\004 \001(\004B\006\n\004_key\";\n\r"
  "RemoveRequest\022\013\n\003all\030\001 \001(\010\022\013\n\003key\030\002 \001(\014\022"
  "\020\n\010key_size\030\003 \001(\004\"\026\n\005Index\022\r\n\005index\030\001 \001("
  "\005\"\247\001\n\tDataplane\022\021\n\tcube_name\030\001 \001(\t\022\021\n\004co"
  "de\030\002 \001(\tH\000\210\001\001\022\r\n\005index\030\003 \001(\005\0224\n\014program_"
  "type\030\004 \001(\0162\036.commons.Dataplane.ProgramTy"
  "pe\"&\n\013ProgramType\022\013\n\007INGRESS\020\000\022\n\n\006EGRESS"
  "\020\001B\007\n\005_code2\301\006\n\010Polycube\0225\n\013Unsubscribe\022"
  "\025.commons.ServicedInfo\032\r.commons.Bool\"\000\022"
  "<\n\tSubscribe\022\024.commons.ToPolycubed\032\023.com"
  "mons.ToServiced\"\000(\0010\001\022.\n\006Reload\022\022.common"
  "s.Dataplane\032\016.commons.Empty\"\000\0227\n\013Destroy"
  "Cube\022\027.commons.CubeManagement\032\r.commons."
  "Bool\"\000\0226\n\nCreateCube\022\027.commons.CubeManag"
  "ement\032\r.commons.Bool\"\000\022@\n\010TableSet\022#.com"
  "mons.ServicedToDataplaneRequest\032\r.common"
  "s.Bool\"\000\022G\n\013TableGetAll\022#.commons.Servic"
  "edToDataplaneRequest\032\021.commons.MapValue\""
  "\000\022D\n\010TableGet\022#.commons.ServicedToDatapl"
  "aneRequest\032\021.commons.MapValue\"\000\022C\n\013Table"
  "Remove\022#.commons.ServicedToDataplaneRequ"
  "est\032\r.commons.Bool\"\000\022F\n\016TableRemoveAll\022#"
  ".commons.ServicedToDataplaneRequest\032\r.co"
  "mmons.Bool\"\000\022\?\n\007SetPort\022#.commons.Servic"
  "edToDataplaneRequest\032\r.commons.Bool\"\000\022\?\n"
  "\007DelPort\022#.commons.ServicedToDataplaneRe"
  "quest\032\r.commons.Bool\"\000\022\?\n\007SetPeer\022#.comm"
  "ons.ServicedToDataplaneRequest\032\r.commons"
  ".Bool\"\000BZZUgithub.com/pinoOgni/polycube-"
  "grpc-service-libraries/polycube-grpc-go;"
  "polycube_grpc_go\370\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polycube_5fgrpc_5fcommons_2eproto = {
  false, false, 4027, descriptor_table_protodef_polycube_5fgrpc_5fcommons_2eproto, "polycube_grpc_commons.proto", 
  &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_polycube_5fgrpc_5fcommons_2eproto::offsets,
  file_level_metadata_polycube_5fgrpc_5fcommons_2eproto, file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto, file_level_service_descriptors_polycube_5fgrpc_5fcommons_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter() {
  return &descriptor_table_polycube_5fgrpc_5fcommons_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_polycube_5fgrpc_5fcommons_2eproto(&descriptor_table_polycube_5fgrpc_5fcommons_2eproto);
namespace commons {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServicedInfo_ServiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polycube_5fgrpc_5fcommons_2eproto);
  return file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto[0];
}
bool ServicedInfo_ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServicedInfo_ServiceType ServicedInfo::STANDARD;
constexpr ServicedInfo_ServiceType ServicedInfo::TRANSPARENT;
constexpr ServicedInfo_ServiceType ServicedInfo::ServiceType_MIN;
constexpr ServicedInfo_ServiceType ServicedInfo::ServiceType_MAX;
constexpr int ServicedInfo::ServiceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CubeInfo_ProgramType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polycube_5fgrpc_5fcommons_2eproto);
  return file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto[1];
}
bool CubeInfo_ProgramType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CubeInfo_ProgramType CubeInfo::INGRESS;
constexpr CubeInfo_ProgramType CubeInfo::EGRESS;
constexpr CubeInfo_ProgramType CubeInfo::ProgramType_MIN;
constexpr CubeInfo_ProgramType CubeInfo::ProgramType_MAX;
constexpr int CubeInfo::ProgramType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CubeManagement_ServiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polycube_5fgrpc_5fcommons_2eproto);
  return file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto[2];
}
bool CubeManagement_ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CubeManagement_ServiceType CubeManagement::STANDARD;
constexpr CubeManagement_ServiceType CubeManagement::TRANSPARENT;
constexpr CubeManagement_ServiceType CubeManagement::ServiceType_MIN;
constexpr CubeManagement_ServiceType CubeManagement::ServiceType_MAX;
constexpr int CubeManagement::ServiceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Port_PortStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polycube_5fgrpc_5fcommons_2eproto);
  return file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto[3];
}
bool Port_PortStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Port_PortStatus Port::DOWN;
constexpr Port_PortStatus Port::UP;
constexpr Port_PortStatus Port::PortStatus_MIN;
constexpr Port_PortStatus Port::PortStatus_MAX;
constexpr int Port::PortStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Port_PortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polycube_5fgrpc_5fcommons_2eproto);
  return file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto[4];
}
bool Port_PortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Port_PortType Port::TC;
constexpr Port_PortType Port::XDP;
constexpr Port_PortType Port::PortType_MIN;
constexpr Port_PortType Port::PortType_MAX;
constexpr int Port::PortType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dataplane_ProgramType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_polycube_5fgrpc_5fcommons_2eproto);
  return file_level_enum_descriptors_polycube_5fgrpc_5fcommons_2eproto[5];
}
bool Dataplane_ProgramType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dataplane_ProgramType Dataplane::INGRESS;
constexpr Dataplane_ProgramType Dataplane::EGRESS;
constexpr Dataplane_ProgramType Dataplane::ProgramType_MIN;
constexpr Dataplane_ProgramType Dataplane::ProgramType_MAX;
constexpr int Dataplane::ProgramType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:commons.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:commons.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[0]);
}

// ===================================================================

class Bool::_Internal {
 public:
};

Bool::Bool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.Bool)
}
Bool::Bool(const Bool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:commons.Bool)
}

inline void Bool::SharedCtor() {
status_ = false;
}

Bool::~Bool() {
  // @@protoc_insertion_point(destructor:commons.Bool)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Bool::ArenaDtor(void* object) {
  Bool* _this = reinterpret_cast< Bool* >(object);
  (void)_this;
}
void Bool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bool::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.Bool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.Bool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.Bool)
  return target;
}

size_t Bool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.Bool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bool::GetClassData() const { return &_class_data_; }

void Bool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bool *>(to)->MergeFrom(
      static_cast<const Bool &>(from));
}


void Bool::MergeFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.Bool)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bool::CopyFrom(const Bool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.Bool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {
  return true;
}

void Bool::InternalSwap(Bool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bool::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[1]);
}

// ===================================================================

class ServicedInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServicedInfo>()._has_bits_);
  static void set_has_service_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cube_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_peer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ServicedInfo::ServicedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.ServicedInfo)
}
ServicedInfo::ServicedInfo(const ServicedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArenaForAllocation());
  }
  cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cube_name()) {
    cube_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cube_name(), 
      GetArenaForAllocation());
  }
  port_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    port_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_port_name()) {
    port_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port_name(), 
      GetArenaForAllocation());
  }
  peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_peer_name()) {
    peer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_type_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(service_type_));
  // @@protoc_insertion_point(copy_constructor:commons.ServicedInfo)
}

inline void ServicedInfo::SharedCtor() {
service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  port_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
peer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_type_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(service_type_));
}

ServicedInfo::~ServicedInfo() {
  // @@protoc_insertion_point(destructor:commons.ServicedInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServicedInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cube_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServicedInfo::ArenaDtor(void* object) {
  ServicedInfo* _this = reinterpret_cast< ServicedInfo* >(object);
  (void)_this;
}
void ServicedInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServicedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServicedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.ServicedInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cube_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      port_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      peer_name_.ClearNonDefaultToEmpty();
    }
  }
  uuid_ = 0;
  service_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServicedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.ServicedInfo.service_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .commons.ServicedInfo.ServiceType service_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_service_type(static_cast<::commons::ServicedInfo_ServiceType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string cube_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cube_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.ServicedInfo.cube_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string port_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_port_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.ServicedInfo.port_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string peer_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_peer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.ServicedInfo.peer_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServicedInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.ServicedInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.ServicedInfo.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uuid(), target);
  }

  // optional .commons.ServicedInfo.ServiceType service_type = 3;
  if (_internal_has_service_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_service_type(), target);
  }

  // optional string cube_name = 4;
  if (_internal_has_cube_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cube_name().data(), static_cast<int>(this->_internal_cube_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.ServicedInfo.cube_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cube_name(), target);
  }

  // optional string port_name = 5;
  if (_internal_has_port_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port_name().data(), static_cast<int>(this->_internal_port_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.ServicedInfo.port_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_port_name(), target);
  }

  // optional string peer_name = 6;
  if (_internal_has_peer_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_name().data(), static_cast<int>(this->_internal_peer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.ServicedInfo.peer_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_peer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.ServicedInfo)
  return target;
}

size_t ServicedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.ServicedInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string cube_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cube_name());
    }

    // optional string port_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_port_name());
    }

    // optional string peer_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_peer_name());
    }

  }
  // int32 uuid = 2;
  if (this->_internal_uuid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
  }

  // optional .commons.ServicedInfo.ServiceType service_type = 3;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServicedInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServicedInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServicedInfo::GetClassData() const { return &_class_data_; }

void ServicedInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServicedInfo *>(to)->MergeFrom(
      static_cast<const ServicedInfo &>(from));
}


void ServicedInfo::MergeFrom(const ServicedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.ServicedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _internal_set_service_name(from._internal_service_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cube_name(from._internal_cube_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_port_name(from._internal_port_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_peer_name(from._internal_peer_name());
    }
  }
  if (from._internal_uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (cached_has_bits & 0x00000008u) {
    _internal_set_service_type(from._internal_service_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServicedInfo::CopyFrom(const ServicedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.ServicedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServicedInfo::IsInitialized() const {
  return true;
}

void ServicedInfo::InternalSwap(ServicedInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cube_name_, lhs_arena,
      &other->cube_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &port_name_, lhs_arena,
      &other->port_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peer_name_, lhs_arena,
      &other->peer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServicedInfo, service_type_)
      + sizeof(ServicedInfo::service_type_)
      - PROTOBUF_FIELD_OFFSET(ServicedInfo, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServicedInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[2]);
}

// ===================================================================

class ToServiced::_Internal {
 public:
  static const ::commons::ServicedInfo& serviced_info(const ToServiced* msg);
  static const ::commons::DataplaneToServicedRequest& dataplane_to_serviced_request(const ToServiced* msg);
  static const ::commons::RestUserToServicedRequest& rest_user_to_service_request(const ToServiced* msg);
  static const ::commons::DataplaneToServicedPacket& dataplane_to_serviced_packet(const ToServiced* msg);
};

const ::commons::ServicedInfo&
ToServiced::_Internal::serviced_info(const ToServiced* msg) {
  return *msg->serviced_info_;
}
const ::commons::DataplaneToServicedRequest&
ToServiced::_Internal::dataplane_to_serviced_request(const ToServiced* msg) {
  return *msg->to_serviced_.dataplane_to_serviced_request_;
}
const ::commons::RestUserToServicedRequest&
ToServiced::_Internal::rest_user_to_service_request(const ToServiced* msg) {
  return *msg->to_serviced_.rest_user_to_service_request_;
}
const ::commons::DataplaneToServicedPacket&
ToServiced::_Internal::dataplane_to_serviced_packet(const ToServiced* msg) {
  return *msg->to_serviced_.dataplane_to_serviced_packet_;
}
void ToServiced::set_allocated_dataplane_to_serviced_request(::commons::DataplaneToServicedRequest* dataplane_to_serviced_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_to_serviced();
  if (dataplane_to_serviced_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::DataplaneToServicedRequest>::GetOwningArena(dataplane_to_serviced_request);
    if (message_arena != submessage_arena) {
      dataplane_to_serviced_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataplane_to_serviced_request, submessage_arena);
    }
    set_has_dataplane_to_serviced_request();
    to_serviced_.dataplane_to_serviced_request_ = dataplane_to_serviced_request;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ToServiced.dataplane_to_serviced_request)
}
void ToServiced::set_allocated_rest_user_to_service_request(::commons::RestUserToServicedRequest* rest_user_to_service_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_to_serviced();
  if (rest_user_to_service_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::RestUserToServicedRequest>::GetOwningArena(rest_user_to_service_request);
    if (message_arena != submessage_arena) {
      rest_user_to_service_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rest_user_to_service_request, submessage_arena);
    }
    set_has_rest_user_to_service_request();
    to_serviced_.rest_user_to_service_request_ = rest_user_to_service_request;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ToServiced.rest_user_to_service_request)
}
void ToServiced::set_allocated_dataplane_to_serviced_packet(::commons::DataplaneToServicedPacket* dataplane_to_serviced_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_to_serviced();
  if (dataplane_to_serviced_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::DataplaneToServicedPacket>::GetOwningArena(dataplane_to_serviced_packet);
    if (message_arena != submessage_arena) {
      dataplane_to_serviced_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataplane_to_serviced_packet, submessage_arena);
    }
    set_has_dataplane_to_serviced_packet();
    to_serviced_.dataplane_to_serviced_packet_ = dataplane_to_serviced_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ToServiced.dataplane_to_serviced_packet)
}
ToServiced::ToServiced(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.ToServiced)
}
ToServiced::ToServiced(const ToServiced& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serviced_info()) {
    serviced_info_ = new ::commons::ServicedInfo(*from.serviced_info_);
  } else {
    serviced_info_ = nullptr;
  }
  clear_has_to_serviced();
  switch (from.to_serviced_case()) {
    case kDataplaneToServicedRequest: {
      _internal_mutable_dataplane_to_serviced_request()->::commons::DataplaneToServicedRequest::MergeFrom(from._internal_dataplane_to_serviced_request());
      break;
    }
    case kRestUserToServiceRequest: {
      _internal_mutable_rest_user_to_service_request()->::commons::RestUserToServicedRequest::MergeFrom(from._internal_rest_user_to_service_request());
      break;
    }
    case kDataplaneToServicedPacket: {
      _internal_mutable_dataplane_to_serviced_packet()->::commons::DataplaneToServicedPacket::MergeFrom(from._internal_dataplane_to_serviced_packet());
      break;
    }
    case TO_SERVICED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commons.ToServiced)
}

inline void ToServiced::SharedCtor() {
serviced_info_ = nullptr;
clear_has_to_serviced();
}

ToServiced::~ToServiced() {
  // @@protoc_insertion_point(destructor:commons.ToServiced)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ToServiced::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete serviced_info_;
  if (has_to_serviced()) {
    clear_to_serviced();
  }
}

void ToServiced::ArenaDtor(void* object) {
  ToServiced* _this = reinterpret_cast< ToServiced* >(object);
  (void)_this;
}
void ToServiced::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToServiced::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToServiced::clear_to_serviced() {
// @@protoc_insertion_point(one_of_clear_start:commons.ToServiced)
  switch (to_serviced_case()) {
    case kDataplaneToServicedRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete to_serviced_.dataplane_to_serviced_request_;
      }
      break;
    }
    case kRestUserToServiceRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete to_serviced_.rest_user_to_service_request_;
      }
      break;
    }
    case kDataplaneToServicedPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete to_serviced_.dataplane_to_serviced_packet_;
      }
      break;
    }
    case TO_SERVICED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TO_SERVICED_NOT_SET;
}


void ToServiced::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.ToServiced)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && serviced_info_ != nullptr) {
    delete serviced_info_;
  }
  serviced_info_ = nullptr;
  clear_to_serviced();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToServiced::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commons.ServicedInfo serviced_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviced_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.DataplaneToServicedRequest dataplane_to_serviced_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataplane_to_serviced_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.RestUserToServicedRequest rest_user_to_service_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rest_user_to_service_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.DataplaneToServicedPacket dataplane_to_serviced_packet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dataplane_to_serviced_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToServiced::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.ToServiced)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commons.ServicedInfo serviced_info = 1;
  if (this->_internal_has_serviced_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::serviced_info(this), target, stream);
  }

  // .commons.DataplaneToServicedRequest dataplane_to_serviced_request = 2;
  if (_internal_has_dataplane_to_serviced_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dataplane_to_serviced_request(this), target, stream);
  }

  // .commons.RestUserToServicedRequest rest_user_to_service_request = 3;
  if (_internal_has_rest_user_to_service_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rest_user_to_service_request(this), target, stream);
  }

  // .commons.DataplaneToServicedPacket dataplane_to_serviced_packet = 4;
  if (_internal_has_dataplane_to_serviced_packet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dataplane_to_serviced_packet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.ToServiced)
  return target;
}

size_t ToServiced::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.ToServiced)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commons.ServicedInfo serviced_info = 1;
  if (this->_internal_has_serviced_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serviced_info_);
  }

  switch (to_serviced_case()) {
    // .commons.DataplaneToServicedRequest dataplane_to_serviced_request = 2;
    case kDataplaneToServicedRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_serviced_.dataplane_to_serviced_request_);
      break;
    }
    // .commons.RestUserToServicedRequest rest_user_to_service_request = 3;
    case kRestUserToServiceRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_serviced_.rest_user_to_service_request_);
      break;
    }
    // .commons.DataplaneToServicedPacket dataplane_to_serviced_packet = 4;
    case kDataplaneToServicedPacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_serviced_.dataplane_to_serviced_packet_);
      break;
    }
    case TO_SERVICED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToServiced::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ToServiced::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToServiced::GetClassData() const { return &_class_data_; }

void ToServiced::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ToServiced *>(to)->MergeFrom(
      static_cast<const ToServiced &>(from));
}


void ToServiced::MergeFrom(const ToServiced& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.ToServiced)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serviced_info()) {
    _internal_mutable_serviced_info()->::commons::ServicedInfo::MergeFrom(from._internal_serviced_info());
  }
  switch (from.to_serviced_case()) {
    case kDataplaneToServicedRequest: {
      _internal_mutable_dataplane_to_serviced_request()->::commons::DataplaneToServicedRequest::MergeFrom(from._internal_dataplane_to_serviced_request());
      break;
    }
    case kRestUserToServiceRequest: {
      _internal_mutable_rest_user_to_service_request()->::commons::RestUserToServicedRequest::MergeFrom(from._internal_rest_user_to_service_request());
      break;
    }
    case kDataplaneToServicedPacket: {
      _internal_mutable_dataplane_to_serviced_packet()->::commons::DataplaneToServicedPacket::MergeFrom(from._internal_dataplane_to_serviced_packet());
      break;
    }
    case TO_SERVICED_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToServiced::CopyFrom(const ToServiced& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.ToServiced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToServiced::IsInitialized() const {
  return true;
}

void ToServiced::InternalSwap(ToServiced* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(serviced_info_, other->serviced_info_);
  swap(to_serviced_, other->to_serviced_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToServiced::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[3]);
}

// ===================================================================

class RestUserToServicedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RestUserToServicedRequest>()._has_bits_);
  static void set_has_request_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RestUserToServicedRequest::RestUserToServicedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.RestUserToServicedRequest)
}
RestUserToServicedRequest::RestUserToServicedRequest(const RestUserToServicedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  http_verb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    http_verb_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_http_verb().empty()) {
    http_verb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_http_verb(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  request_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_request_body()) {
    request_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_body(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:commons.RestUserToServicedRequest)
}

inline void RestUserToServicedRequest::SharedCtor() {
http_verb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  http_verb_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
request_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RestUserToServicedRequest::~RestUserToServicedRequest() {
  // @@protoc_insertion_point(destructor:commons.RestUserToServicedRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RestUserToServicedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  http_verb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestUserToServicedRequest::ArenaDtor(void* object) {
  RestUserToServicedRequest* _this = reinterpret_cast< RestUserToServicedRequest* >(object);
  (void)_this;
}
void RestUserToServicedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestUserToServicedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestUserToServicedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.RestUserToServicedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_verb_.ClearToEmpty();
  url_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_body_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestUserToServicedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string http_verb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_http_verb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.RestUserToServicedRequest.http_verb"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.RestUserToServicedRequest.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string request_body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_request_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.RestUserToServicedRequest.request_body"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RestUserToServicedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.RestUserToServicedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string http_verb = 1;
  if (!this->_internal_http_verb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_http_verb().data(), static_cast<int>(this->_internal_http_verb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.RestUserToServicedRequest.http_verb");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_http_verb(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.RestUserToServicedRequest.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string request_body = 3;
  if (_internal_has_request_body()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_body().data(), static_cast<int>(this->_internal_request_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.RestUserToServicedRequest.request_body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_request_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.RestUserToServicedRequest)
  return target;
}

size_t RestUserToServicedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.RestUserToServicedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string http_verb = 1;
  if (!this->_internal_http_verb().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_http_verb());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // optional string request_body = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestUserToServicedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RestUserToServicedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestUserToServicedRequest::GetClassData() const { return &_class_data_; }

void RestUserToServicedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RestUserToServicedRequest *>(to)->MergeFrom(
      static_cast<const RestUserToServicedRequest &>(from));
}


void RestUserToServicedRequest::MergeFrom(const RestUserToServicedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.RestUserToServicedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_http_verb().empty()) {
    _internal_set_http_verb(from._internal_http_verb());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_has_request_body()) {
    _internal_set_request_body(from._internal_request_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RestUserToServicedRequest::CopyFrom(const RestUserToServicedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.RestUserToServicedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestUserToServicedRequest::IsInitialized() const {
  return true;
}

void RestUserToServicedRequest::InternalSwap(RestUserToServicedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &http_verb_, lhs_arena,
      &other->http_verb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_body_, lhs_arena,
      &other->request_body_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RestUserToServicedRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[4]);
}

// ===================================================================

class DataplaneToServicedRequest::_Internal {
 public:
};

DataplaneToServicedRequest::DataplaneToServicedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parameters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.DataplaneToServicedRequest)
}
DataplaneToServicedRequest::DataplaneToServicedRequest(const DataplaneToServicedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controlplane_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    controlplane_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controlplane_method().empty()) {
    controlplane_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_controlplane_method(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:commons.DataplaneToServicedRequest)
}

inline void DataplaneToServicedRequest::SharedCtor() {
controlplane_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  controlplane_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataplaneToServicedRequest::~DataplaneToServicedRequest() {
  // @@protoc_insertion_point(destructor:commons.DataplaneToServicedRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataplaneToServicedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  controlplane_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataplaneToServicedRequest::ArenaDtor(void* object) {
  DataplaneToServicedRequest* _this = reinterpret_cast< DataplaneToServicedRequest* >(object);
  (void)_this;
}
void DataplaneToServicedRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataplaneToServicedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataplaneToServicedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.DataplaneToServicedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  controlplane_method_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataplaneToServicedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string controlplane_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_controlplane_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.DataplaneToServicedRequest.controlplane_method"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parameters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataplaneToServicedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.DataplaneToServicedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string controlplane_method = 1;
  if (!this->_internal_controlplane_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controlplane_method().data(), static_cast<int>(this->_internal_controlplane_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.DataplaneToServicedRequest.controlplane_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_controlplane_method(), target);
  }

  // repeated bytes parameters = 2;
  for (int i = 0, n = this->_internal_parameters_size(); i < n; i++) {
    const auto& s = this->_internal_parameters(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.DataplaneToServicedRequest)
  return target;
}

size_t DataplaneToServicedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.DataplaneToServicedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes parameters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(parameters_.size());
  for (int i = 0, n = parameters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      parameters_.Get(i));
  }

  // string controlplane_method = 1;
  if (!this->_internal_controlplane_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controlplane_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataplaneToServicedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataplaneToServicedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataplaneToServicedRequest::GetClassData() const { return &_class_data_; }

void DataplaneToServicedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataplaneToServicedRequest *>(to)->MergeFrom(
      static_cast<const DataplaneToServicedRequest &>(from));
}


void DataplaneToServicedRequest::MergeFrom(const DataplaneToServicedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.DataplaneToServicedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (!from._internal_controlplane_method().empty()) {
    _internal_set_controlplane_method(from._internal_controlplane_method());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataplaneToServicedRequest::CopyFrom(const DataplaneToServicedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.DataplaneToServicedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataplaneToServicedRequest::IsInitialized() const {
  return true;
}

void DataplaneToServicedRequest::InternalSwap(DataplaneToServicedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &controlplane_method_, lhs_arena,
      &other->controlplane_method_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataplaneToServicedRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[5]);
}

// ===================================================================

class DataplaneToServicedPacket::_Internal {
 public:
};

DataplaneToServicedPacket::DataplaneToServicedPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena),
  packet_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.DataplaneToServicedPacket)
}
DataplaneToServicedPacket::DataplaneToServicedPacket(const DataplaneToServicedPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_(from.metadata_),
      packet_(from.packet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cube_id_, &from.cube_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&cube_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:commons.DataplaneToServicedPacket)
}

inline void DataplaneToServicedPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cube_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&cube_id_)) + sizeof(reason_));
}

DataplaneToServicedPacket::~DataplaneToServicedPacket() {
  // @@protoc_insertion_point(destructor:commons.DataplaneToServicedPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataplaneToServicedPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataplaneToServicedPacket::ArenaDtor(void* object) {
  DataplaneToServicedPacket* _this = reinterpret_cast< DataplaneToServicedPacket* >(object);
  (void)_this;
}
void DataplaneToServicedPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataplaneToServicedPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataplaneToServicedPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.DataplaneToServicedPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  packet_.Clear();
  ::memset(&cube_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&cube_id_)) + sizeof(reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataplaneToServicedPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 cube_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cube_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 packet_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          packet_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 traffic_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          traffic_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_metadata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_metadata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 packet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packet(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_packet(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataplaneToServicedPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.DataplaneToServicedPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cube_id = 1;
  if (this->_internal_cube_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cube_id(), target);
  }

  // uint32 port_id = 2;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port_id(), target);
  }

  // uint32 packet_len = 3;
  if (this->_internal_packet_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packet_len(), target);
  }

  // uint32 traffic_class = 4;
  if (this->_internal_traffic_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_traffic_class(), target);
  }

  // uint32 reason = 5;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reason(), target);
  }

  // repeated uint32 metadata = 6;
  {
    int byte_size = _metadata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_metadata(), byte_size, target);
    }
  }

  // repeated uint32 packet = 7;
  {
    int byte_size = _packet_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_packet(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.DataplaneToServicedPacket)
  return target;
}

size_t DataplaneToServicedPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.DataplaneToServicedPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 metadata = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->metadata_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _metadata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packet = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packet_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packet_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 cube_id = 1;
  if (this->_internal_cube_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cube_id());
  }

  // uint32 port_id = 2;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port_id());
  }

  // uint32 packet_len = 3;
  if (this->_internal_packet_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_len());
  }

  // uint32 traffic_class = 4;
  if (this->_internal_traffic_class() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_traffic_class());
  }

  // uint32 reason = 5;
  if (this->_internal_reason() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataplaneToServicedPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataplaneToServicedPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataplaneToServicedPacket::GetClassData() const { return &_class_data_; }

void DataplaneToServicedPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataplaneToServicedPacket *>(to)->MergeFrom(
      static_cast<const DataplaneToServicedPacket &>(from));
}


void DataplaneToServicedPacket::MergeFrom(const DataplaneToServicedPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.DataplaneToServicedPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  packet_.MergeFrom(from.packet_);
  if (from._internal_cube_id() != 0) {
    _internal_set_cube_id(from._internal_cube_id());
  }
  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  if (from._internal_packet_len() != 0) {
    _internal_set_packet_len(from._internal_packet_len());
  }
  if (from._internal_traffic_class() != 0) {
    _internal_set_traffic_class(from._internal_traffic_class());
  }
  if (from._internal_reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataplaneToServicedPacket::CopyFrom(const DataplaneToServicedPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.DataplaneToServicedPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataplaneToServicedPacket::IsInitialized() const {
  return true;
}

void DataplaneToServicedPacket::InternalSwap(DataplaneToServicedPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  packet_.InternalSwap(&other->packet_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataplaneToServicedPacket, reason_)
      + sizeof(DataplaneToServicedPacket::reason_)
      - PROTOBUF_FIELD_OFFSET(DataplaneToServicedPacket, cube_id_)>(
          reinterpret_cast<char*>(&cube_id_),
          reinterpret_cast<char*>(&other->cube_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataplaneToServicedPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[6]);
}

// ===================================================================

class ToPolycubed::_Internal {
 public:
  static const ::commons::ServicedInfo& serviced_info(const ToPolycubed* msg);
  static const ::commons::ServicedToDataplaneReply& serviced_to_dataplane_reply(const ToPolycubed* msg);
  static const ::commons::ServicedToRestUserReply& serviced_to_rest_user_reply(const ToPolycubed* msg);
};

const ::commons::ServicedInfo&
ToPolycubed::_Internal::serviced_info(const ToPolycubed* msg) {
  return *msg->serviced_info_;
}
const ::commons::ServicedToDataplaneReply&
ToPolycubed::_Internal::serviced_to_dataplane_reply(const ToPolycubed* msg) {
  return *msg->to_polycubed_.serviced_to_dataplane_reply_;
}
const ::commons::ServicedToRestUserReply&
ToPolycubed::_Internal::serviced_to_rest_user_reply(const ToPolycubed* msg) {
  return *msg->to_polycubed_.serviced_to_rest_user_reply_;
}
void ToPolycubed::set_allocated_serviced_to_dataplane_reply(::commons::ServicedToDataplaneReply* serviced_to_dataplane_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_to_polycubed();
  if (serviced_to_dataplane_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::ServicedToDataplaneReply>::GetOwningArena(serviced_to_dataplane_reply);
    if (message_arena != submessage_arena) {
      serviced_to_dataplane_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serviced_to_dataplane_reply, submessage_arena);
    }
    set_has_serviced_to_dataplane_reply();
    to_polycubed_.serviced_to_dataplane_reply_ = serviced_to_dataplane_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ToPolycubed.serviced_to_dataplane_reply)
}
void ToPolycubed::set_allocated_serviced_to_rest_user_reply(::commons::ServicedToRestUserReply* serviced_to_rest_user_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_to_polycubed();
  if (serviced_to_rest_user_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::ServicedToRestUserReply>::GetOwningArena(serviced_to_rest_user_reply);
    if (message_arena != submessage_arena) {
      serviced_to_rest_user_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serviced_to_rest_user_reply, submessage_arena);
    }
    set_has_serviced_to_rest_user_reply();
    to_polycubed_.serviced_to_rest_user_reply_ = serviced_to_rest_user_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ToPolycubed.serviced_to_rest_user_reply)
}
ToPolycubed::ToPolycubed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.ToPolycubed)
}
ToPolycubed::ToPolycubed(const ToPolycubed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serviced_info()) {
    serviced_info_ = new ::commons::ServicedInfo(*from.serviced_info_);
  } else {
    serviced_info_ = nullptr;
  }
  clear_has_to_polycubed();
  switch (from.to_polycubed_case()) {
    case kSubscribe: {
      _internal_set_subscribe(from._internal_subscribe());
      break;
    }
    case kServicedToDataplaneReply: {
      _internal_mutable_serviced_to_dataplane_reply()->::commons::ServicedToDataplaneReply::MergeFrom(from._internal_serviced_to_dataplane_reply());
      break;
    }
    case kServicedToRestUserReply: {
      _internal_mutable_serviced_to_rest_user_reply()->::commons::ServicedToRestUserReply::MergeFrom(from._internal_serviced_to_rest_user_reply());
      break;
    }
    case TO_POLYCUBED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commons.ToPolycubed)
}

inline void ToPolycubed::SharedCtor() {
serviced_info_ = nullptr;
clear_has_to_polycubed();
}

ToPolycubed::~ToPolycubed() {
  // @@protoc_insertion_point(destructor:commons.ToPolycubed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ToPolycubed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete serviced_info_;
  if (has_to_polycubed()) {
    clear_to_polycubed();
  }
}

void ToPolycubed::ArenaDtor(void* object) {
  ToPolycubed* _this = reinterpret_cast< ToPolycubed* >(object);
  (void)_this;
}
void ToPolycubed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToPolycubed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ToPolycubed::clear_to_polycubed() {
// @@protoc_insertion_point(one_of_clear_start:commons.ToPolycubed)
  switch (to_polycubed_case()) {
    case kSubscribe: {
      // No need to clear
      break;
    }
    case kServicedToDataplaneReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete to_polycubed_.serviced_to_dataplane_reply_;
      }
      break;
    }
    case kServicedToRestUserReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete to_polycubed_.serviced_to_rest_user_reply_;
      }
      break;
    }
    case TO_POLYCUBED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TO_POLYCUBED_NOT_SET;
}


void ToPolycubed::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.ToPolycubed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && serviced_info_ != nullptr) {
    delete serviced_info_;
  }
  serviced_info_ = nullptr;
  clear_to_polycubed();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToPolycubed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commons.ServicedInfo serviced_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviced_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool subscribe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_subscribe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.ServicedToDataplaneReply serviced_to_dataplane_reply = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviced_to_dataplane_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.ServicedToRestUserReply serviced_to_rest_user_reply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviced_to_rest_user_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ToPolycubed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.ToPolycubed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commons.ServicedInfo serviced_info = 1;
  if (this->_internal_has_serviced_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::serviced_info(this), target, stream);
  }

  // bool subscribe = 2;
  if (_internal_has_subscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_subscribe(), target);
  }

  // .commons.ServicedToDataplaneReply serviced_to_dataplane_reply = 3;
  if (_internal_has_serviced_to_dataplane_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::serviced_to_dataplane_reply(this), target, stream);
  }

  // .commons.ServicedToRestUserReply serviced_to_rest_user_reply = 4;
  if (_internal_has_serviced_to_rest_user_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::serviced_to_rest_user_reply(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.ToPolycubed)
  return target;
}

size_t ToPolycubed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.ToPolycubed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commons.ServicedInfo serviced_info = 1;
  if (this->_internal_has_serviced_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serviced_info_);
  }

  switch (to_polycubed_case()) {
    // bool subscribe = 2;
    case kSubscribe: {
      total_size += 1 + 1;
      break;
    }
    // .commons.ServicedToDataplaneReply serviced_to_dataplane_reply = 3;
    case kServicedToDataplaneReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_polycubed_.serviced_to_dataplane_reply_);
      break;
    }
    // .commons.ServicedToRestUserReply serviced_to_rest_user_reply = 4;
    case kServicedToRestUserReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_polycubed_.serviced_to_rest_user_reply_);
      break;
    }
    case TO_POLYCUBED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ToPolycubed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ToPolycubed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ToPolycubed::GetClassData() const { return &_class_data_; }

void ToPolycubed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ToPolycubed *>(to)->MergeFrom(
      static_cast<const ToPolycubed &>(from));
}


void ToPolycubed::MergeFrom(const ToPolycubed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.ToPolycubed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serviced_info()) {
    _internal_mutable_serviced_info()->::commons::ServicedInfo::MergeFrom(from._internal_serviced_info());
  }
  switch (from.to_polycubed_case()) {
    case kSubscribe: {
      _internal_set_subscribe(from._internal_subscribe());
      break;
    }
    case kServicedToDataplaneReply: {
      _internal_mutable_serviced_to_dataplane_reply()->::commons::ServicedToDataplaneReply::MergeFrom(from._internal_serviced_to_dataplane_reply());
      break;
    }
    case kServicedToRestUserReply: {
      _internal_mutable_serviced_to_rest_user_reply()->::commons::ServicedToRestUserReply::MergeFrom(from._internal_serviced_to_rest_user_reply());
      break;
    }
    case TO_POLYCUBED_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ToPolycubed::CopyFrom(const ToPolycubed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.ToPolycubed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToPolycubed::IsInitialized() const {
  return true;
}

void ToPolycubed::InternalSwap(ToPolycubed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(serviced_info_, other->serviced_info_);
  swap(to_polycubed_, other->to_polycubed_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToPolycubed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[7]);
}

// ===================================================================

class ServicedToDataplaneReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ServicedToDataplaneReply>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServicedToDataplaneReply::ServicedToDataplaneReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.ServicedToDataplaneReply)
}
ServicedToDataplaneReply::ServicedToDataplaneReply(const ServicedToDataplaneReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:commons.ServicedToDataplaneReply)
}

inline void ServicedToDataplaneReply::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

ServicedToDataplaneReply::~ServicedToDataplaneReply() {
  // @@protoc_insertion_point(destructor:commons.ServicedToDataplaneReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServicedToDataplaneReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServicedToDataplaneReply::ArenaDtor(void* object) {
  ServicedToDataplaneReply* _this = reinterpret_cast< ServicedToDataplaneReply* >(object);
  (void)_this;
}
void ServicedToDataplaneReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServicedToDataplaneReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServicedToDataplaneReply::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.ServicedToDataplaneReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServicedToDataplaneReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.ServicedToDataplaneReply.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServicedToDataplaneReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.ServicedToDataplaneReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional string message = 2;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.ServicedToDataplaneReply.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.ServicedToDataplaneReply)
  return target;
}

size_t ServicedToDataplaneReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.ServicedToDataplaneReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServicedToDataplaneReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServicedToDataplaneReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServicedToDataplaneReply::GetClassData() const { return &_class_data_; }

void ServicedToDataplaneReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServicedToDataplaneReply *>(to)->MergeFrom(
      static_cast<const ServicedToDataplaneReply &>(from));
}


void ServicedToDataplaneReply::MergeFrom(const ServicedToDataplaneReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.ServicedToDataplaneReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServicedToDataplaneReply::CopyFrom(const ServicedToDataplaneReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.ServicedToDataplaneReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServicedToDataplaneReply::IsInitialized() const {
  return true;
}

void ServicedToDataplaneReply::InternalSwap(ServicedToDataplaneReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServicedToDataplaneReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[8]);
}

// ===================================================================

class ServicedToRestUserReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ServicedToRestUserReply>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ServicedToRestUserReply::ServicedToRestUserReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.ServicedToRestUserReply)
}
ServicedToRestUserReply::ServicedToRestUserReply(const ServicedToRestUserReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:commons.ServicedToRestUserReply)
}

inline void ServicedToRestUserReply::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

ServicedToRestUserReply::~ServicedToRestUserReply() {
  // @@protoc_insertion_point(destructor:commons.ServicedToRestUserReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServicedToRestUserReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServicedToRestUserReply::ArenaDtor(void* object) {
  ServicedToRestUserReply* _this = reinterpret_cast< ServicedToRestUserReply* >(object);
  (void)_this;
}
void ServicedToRestUserReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServicedToRestUserReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServicedToRestUserReply::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.ServicedToRestUserReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServicedToRestUserReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.ServicedToRestUserReply.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServicedToRestUserReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.ServicedToRestUserReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional string message = 2;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.ServicedToRestUserReply.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.ServicedToRestUserReply)
  return target;
}

size_t ServicedToRestUserReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.ServicedToRestUserReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServicedToRestUserReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServicedToRestUserReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServicedToRestUserReply::GetClassData() const { return &_class_data_; }

void ServicedToRestUserReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServicedToRestUserReply *>(to)->MergeFrom(
      static_cast<const ServicedToRestUserReply &>(from));
}


void ServicedToRestUserReply::MergeFrom(const ServicedToRestUserReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.ServicedToRestUserReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServicedToRestUserReply::CopyFrom(const ServicedToRestUserReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.ServicedToRestUserReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServicedToRestUserReply::IsInitialized() const {
  return true;
}

void ServicedToRestUserReply::InternalSwap(ServicedToRestUserReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServicedToRestUserReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[9]);
}

// ===================================================================

class ServicedToDataplaneRequest::_Internal {
 public:
  static const ::commons::ServicedInfo& serviced_info(const ServicedToDataplaneRequest* msg);
  static const ::commons::CubeInfo& cube_info(const ServicedToDataplaneRequest* msg);
  static const ::commons::SetRequest& set_request(const ServicedToDataplaneRequest* msg);
  static const ::commons::GetRequest& get_request(const ServicedToDataplaneRequest* msg);
  static const ::commons::RemoveRequest& remove_request(const ServicedToDataplaneRequest* msg);
  static const ::commons::Port& port(const ServicedToDataplaneRequest* msg);
};

const ::commons::ServicedInfo&
ServicedToDataplaneRequest::_Internal::serviced_info(const ServicedToDataplaneRequest* msg) {
  return *msg->serviced_info_;
}
const ::commons::CubeInfo&
ServicedToDataplaneRequest::_Internal::cube_info(const ServicedToDataplaneRequest* msg) {
  return *msg->cube_info_;
}
const ::commons::SetRequest&
ServicedToDataplaneRequest::_Internal::set_request(const ServicedToDataplaneRequest* msg) {
  return *msg->request_type_.set_request_;
}
const ::commons::GetRequest&
ServicedToDataplaneRequest::_Internal::get_request(const ServicedToDataplaneRequest* msg) {
  return *msg->request_type_.get_request_;
}
const ::commons::RemoveRequest&
ServicedToDataplaneRequest::_Internal::remove_request(const ServicedToDataplaneRequest* msg) {
  return *msg->request_type_.remove_request_;
}
const ::commons::Port&
ServicedToDataplaneRequest::_Internal::port(const ServicedToDataplaneRequest* msg) {
  return *msg->request_type_.port_;
}
void ServicedToDataplaneRequest::set_allocated_set_request(::commons::SetRequest* set_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (set_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::SetRequest>::GetOwningArena(set_request);
    if (message_arena != submessage_arena) {
      set_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_request, submessage_arena);
    }
    set_has_set_request();
    request_type_.set_request_ = set_request;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ServicedToDataplaneRequest.set_request)
}
void ServicedToDataplaneRequest::set_allocated_get_request(::commons::GetRequest* get_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (get_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::GetRequest>::GetOwningArena(get_request);
    if (message_arena != submessage_arena) {
      get_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_request, submessage_arena);
    }
    set_has_get_request();
    request_type_.get_request_ = get_request;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ServicedToDataplaneRequest.get_request)
}
void ServicedToDataplaneRequest::set_allocated_remove_request(::commons::RemoveRequest* remove_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (remove_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::RemoveRequest>::GetOwningArena(remove_request);
    if (message_arena != submessage_arena) {
      remove_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_request, submessage_arena);
    }
    set_has_remove_request();
    request_type_.remove_request_ = remove_request;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ServicedToDataplaneRequest.remove_request)
}
void ServicedToDataplaneRequest::set_allocated_port(::commons::Port* port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request_type();
  if (port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commons::Port>::GetOwningArena(port);
    if (message_arena != submessage_arena) {
      port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    set_has_port();
    request_type_.port_ = port;
  }
  // @@protoc_insertion_point(field_set_allocated:commons.ServicedToDataplaneRequest.port)
}
ServicedToDataplaneRequest::ServicedToDataplaneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.ServicedToDataplaneRequest)
}
ServicedToDataplaneRequest::ServicedToDataplaneRequest(const ServicedToDataplaneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serviced_info()) {
    serviced_info_ = new ::commons::ServicedInfo(*from.serviced_info_);
  } else {
    serviced_info_ = nullptr;
  }
  if (from._internal_has_cube_info()) {
    cube_info_ = new ::commons::CubeInfo(*from.cube_info_);
  } else {
    cube_info_ = nullptr;
  }
  clear_has_request_type();
  switch (from.request_type_case()) {
    case kSetRequest: {
      _internal_mutable_set_request()->::commons::SetRequest::MergeFrom(from._internal_set_request());
      break;
    }
    case kGetRequest: {
      _internal_mutable_get_request()->::commons::GetRequest::MergeFrom(from._internal_get_request());
      break;
    }
    case kRemoveRequest: {
      _internal_mutable_remove_request()->::commons::RemoveRequest::MergeFrom(from._internal_remove_request());
      break;
    }
    case kPort: {
      _internal_mutable_port()->::commons::Port::MergeFrom(from._internal_port());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:commons.ServicedToDataplaneRequest)
}

inline void ServicedToDataplaneRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&serviced_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cube_info_) -
    reinterpret_cast<char*>(&serviced_info_)) + sizeof(cube_info_));
clear_has_request_type();
}

ServicedToDataplaneRequest::~ServicedToDataplaneRequest() {
  // @@protoc_insertion_point(destructor:commons.ServicedToDataplaneRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServicedToDataplaneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete serviced_info_;
  if (this != internal_default_instance()) delete cube_info_;
  if (has_request_type()) {
    clear_request_type();
  }
}

void ServicedToDataplaneRequest::ArenaDtor(void* object) {
  ServicedToDataplaneRequest* _this = reinterpret_cast< ServicedToDataplaneRequest* >(object);
  (void)_this;
}
void ServicedToDataplaneRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServicedToDataplaneRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServicedToDataplaneRequest::clear_request_type() {
// @@protoc_insertion_point(one_of_clear_start:commons.ServicedToDataplaneRequest)
  switch (request_type_case()) {
    case kSetRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.set_request_;
      }
      break;
    }
    case kGetRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.get_request_;
      }
      break;
    }
    case kRemoveRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.remove_request_;
      }
      break;
    }
    case kPort: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_type_.port_;
      }
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_TYPE_NOT_SET;
}


void ServicedToDataplaneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.ServicedToDataplaneRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && serviced_info_ != nullptr) {
    delete serviced_info_;
  }
  serviced_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cube_info_ != nullptr) {
    delete cube_info_;
  }
  cube_info_ = nullptr;
  clear_request_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServicedToDataplaneRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .commons.ServicedInfo serviced_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serviced_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.CubeInfo cube_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cube_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.SetRequest set_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.GetRequest get_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.RemoveRequest remove_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.Port port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_port(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServicedToDataplaneRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.ServicedToDataplaneRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .commons.ServicedInfo serviced_info = 1;
  if (this->_internal_has_serviced_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::serviced_info(this), target, stream);
  }

  // .commons.CubeInfo cube_info = 2;
  if (this->_internal_has_cube_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cube_info(this), target, stream);
  }

  // .commons.SetRequest set_request = 3;
  if (_internal_has_set_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_request(this), target, stream);
  }

  // .commons.GetRequest get_request = 4;
  if (_internal_has_get_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_request(this), target, stream);
  }

  // .commons.RemoveRequest remove_request = 5;
  if (_internal_has_remove_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::remove_request(this), target, stream);
  }

  // .commons.Port port = 6;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::port(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.ServicedToDataplaneRequest)
  return target;
}

size_t ServicedToDataplaneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.ServicedToDataplaneRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .commons.ServicedInfo serviced_info = 1;
  if (this->_internal_has_serviced_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *serviced_info_);
  }

  // .commons.CubeInfo cube_info = 2;
  if (this->_internal_has_cube_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cube_info_);
  }

  switch (request_type_case()) {
    // .commons.SetRequest set_request = 3;
    case kSetRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.set_request_);
      break;
    }
    // .commons.GetRequest get_request = 4;
    case kGetRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.get_request_);
      break;
    }
    // .commons.RemoveRequest remove_request = 5;
    case kRemoveRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.remove_request_);
      break;
    }
    // .commons.Port port = 6;
    case kPort: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_type_.port_);
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServicedToDataplaneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServicedToDataplaneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServicedToDataplaneRequest::GetClassData() const { return &_class_data_; }

void ServicedToDataplaneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServicedToDataplaneRequest *>(to)->MergeFrom(
      static_cast<const ServicedToDataplaneRequest &>(from));
}


void ServicedToDataplaneRequest::MergeFrom(const ServicedToDataplaneRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.ServicedToDataplaneRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serviced_info()) {
    _internal_mutable_serviced_info()->::commons::ServicedInfo::MergeFrom(from._internal_serviced_info());
  }
  if (from._internal_has_cube_info()) {
    _internal_mutable_cube_info()->::commons::CubeInfo::MergeFrom(from._internal_cube_info());
  }
  switch (from.request_type_case()) {
    case kSetRequest: {
      _internal_mutable_set_request()->::commons::SetRequest::MergeFrom(from._internal_set_request());
      break;
    }
    case kGetRequest: {
      _internal_mutable_get_request()->::commons::GetRequest::MergeFrom(from._internal_get_request());
      break;
    }
    case kRemoveRequest: {
      _internal_mutable_remove_request()->::commons::RemoveRequest::MergeFrom(from._internal_remove_request());
      break;
    }
    case kPort: {
      _internal_mutable_port()->::commons::Port::MergeFrom(from._internal_port());
      break;
    }
    case REQUEST_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServicedToDataplaneRequest::CopyFrom(const ServicedToDataplaneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.ServicedToDataplaneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServicedToDataplaneRequest::IsInitialized() const {
  return true;
}

void ServicedToDataplaneRequest::InternalSwap(ServicedToDataplaneRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServicedToDataplaneRequest, cube_info_)
      + sizeof(ServicedToDataplaneRequest::cube_info_)
      - PROTOBUF_FIELD_OFFSET(ServicedToDataplaneRequest, serviced_info_)>(
          reinterpret_cast<char*>(&serviced_info_),
          reinterpret_cast<char*>(&other->serviced_info_));
  swap(request_type_, other->request_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServicedToDataplaneRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[10]);
}

// ===================================================================

class CubeInfo::_Internal {
 public:
};

CubeInfo::CubeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.CubeInfo)
}
CubeInfo::CubeInfo(const CubeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cube_name().empty()) {
    cube_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cube_name(), 
      GetArenaForAllocation());
  }
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_name().empty()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(program_type_));
  // @@protoc_insertion_point(copy_constructor:commons.CubeInfo)
}

inline void CubeInfo::SharedCtor() {
cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&program_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(program_type_));
}

CubeInfo::~CubeInfo() {
  // @@protoc_insertion_point(destructor:commons.CubeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CubeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cube_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CubeInfo::ArenaDtor(void* object) {
  CubeInfo* _this = reinterpret_cast< CubeInfo* >(object);
  (void)_this;
}
void CubeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CubeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CubeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.CubeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cube_name_.ClearToEmpty();
  map_name_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(program_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CubeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cube_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cube_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeInfo.cube_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string map_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeInfo.map_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.CubeInfo.ProgramType program_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_program_type(static_cast<::commons::CubeInfo_ProgramType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CubeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.CubeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cube_name = 1;
  if (!this->_internal_cube_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cube_name().data(), static_cast<int>(this->_internal_cube_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeInfo.cube_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cube_name(), target);
  }

  // string map_name = 2;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeInfo.map_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map_name(), target);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // .commons.CubeInfo.ProgramType program_type = 4;
  if (this->_internal_program_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_program_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.CubeInfo)
  return target;
}

size_t CubeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.CubeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cube_name = 1;
  if (!this->_internal_cube_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cube_name());
  }

  // string map_name = 2;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // .commons.CubeInfo.ProgramType program_type = 4;
  if (this->_internal_program_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_program_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CubeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CubeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CubeInfo::GetClassData() const { return &_class_data_; }

void CubeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CubeInfo *>(to)->MergeFrom(
      static_cast<const CubeInfo &>(from));
}


void CubeInfo::MergeFrom(const CubeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.CubeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cube_name().empty()) {
    _internal_set_cube_name(from._internal_cube_name());
  }
  if (!from._internal_map_name().empty()) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_program_type() != 0) {
    _internal_set_program_type(from._internal_program_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CubeInfo::CopyFrom(const CubeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.CubeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubeInfo::IsInitialized() const {
  return true;
}

void CubeInfo::InternalSwap(CubeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cube_name_, lhs_arena,
      &other->cube_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &map_name_, lhs_arena,
      &other->map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CubeInfo, program_type_)
      + sizeof(CubeInfo::program_type_)
      - PROTOBUF_FIELD_OFFSET(CubeInfo, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CubeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[11]);
}

// ===================================================================

class CubeManagement::_Internal {
 public:
  using HasBits = decltype(std::declval<CubeManagement>()._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_service_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ingress_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_egress_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_loglevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CubeManagement::CubeManagement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.CubeManagement)
}
CubeManagement::CubeManagement(const CubeManagement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cube_name().empty()) {
    cube_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cube_name(), 
      GetArenaForAllocation());
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_name()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArenaForAllocation());
  }
  ingress_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ingress_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ingress_code()) {
    ingress_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ingress_code(), 
      GetArenaForAllocation());
  }
  egress_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    egress_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_egress_code()) {
    egress_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_egress_code(), 
      GetArenaForAllocation());
  }
  loglevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    loglevel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_loglevel()) {
    loglevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loglevel(), 
      GetArenaForAllocation());
  }
  conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_conf()) {
    conf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_conf(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_type_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(service_type_));
  // @@protoc_insertion_point(copy_constructor:commons.CubeManagement)
}

inline void CubeManagement::SharedCtor() {
cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ingress_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ingress_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
egress_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  egress_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
loglevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  loglevel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
conf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_type_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(service_type_));
}

CubeManagement::~CubeManagement() {
  // @@protoc_insertion_point(destructor:commons.CubeManagement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CubeManagement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cube_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ingress_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  egress_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loglevel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CubeManagement::ArenaDtor(void* object) {
  CubeManagement* _this = reinterpret_cast< CubeManagement* >(object);
  (void)_this;
}
void CubeManagement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CubeManagement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CubeManagement::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.CubeManagement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cube_name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      service_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ingress_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      egress_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      loglevel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      conf_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&uuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_type_) -
        reinterpret_cast<char*>(&uuid_)) + sizeof(service_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CubeManagement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cube_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cube_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeManagement.cube_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeManagement.service_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 uuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uuid(&has_bits);
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .commons.CubeManagement.ServiceType service_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_service_type(static_cast<::commons::CubeManagement_ServiceType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string ingress_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ingress_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeManagement.ingress_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string egress_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_egress_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeManagement.egress_code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string loglevel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_loglevel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeManagement.loglevel"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string conf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_conf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.CubeManagement.conf"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CubeManagement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.CubeManagement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cube_name = 1;
  if (!this->_internal_cube_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cube_name().data(), static_cast<int>(this->_internal_cube_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeManagement.cube_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cube_name(), target);
  }

  // optional string service_name = 2;
  if (_internal_has_service_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeManagement.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  // optional int32 uuid = 3;
  if (_internal_has_uuid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uuid(), target);
  }

  // optional .commons.CubeManagement.ServiceType service_type = 4;
  if (_internal_has_service_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_service_type(), target);
  }

  // optional string ingress_code = 5;
  if (_internal_has_ingress_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ingress_code().data(), static_cast<int>(this->_internal_ingress_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeManagement.ingress_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ingress_code(), target);
  }

  // optional string egress_code = 6;
  if (_internal_has_egress_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress_code().data(), static_cast<int>(this->_internal_egress_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeManagement.egress_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_egress_code(), target);
  }

  // optional string loglevel = 7;
  if (_internal_has_loglevel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loglevel().data(), static_cast<int>(this->_internal_loglevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeManagement.loglevel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_loglevel(), target);
  }

  // optional string conf = 8;
  if (_internal_has_conf()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conf().data(), static_cast<int>(this->_internal_conf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.CubeManagement.conf");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_conf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.CubeManagement)
  return target;
}

size_t CubeManagement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.CubeManagement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cube_name = 1;
  if (!this->_internal_cube_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cube_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string service_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service_name());
    }

    // optional string ingress_code = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ingress_code());
    }

    // optional string egress_code = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_egress_code());
    }

    // optional string loglevel = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loglevel());
    }

    // optional string conf = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_conf());
    }

    // optional int32 uuid = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uuid());
    }

    // optional .commons.CubeManagement.ServiceType service_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_service_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CubeManagement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CubeManagement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CubeManagement::GetClassData() const { return &_class_data_; }

void CubeManagement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CubeManagement *>(to)->MergeFrom(
      static_cast<const CubeManagement &>(from));
}


void CubeManagement::MergeFrom(const CubeManagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.CubeManagement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cube_name().empty()) {
    _internal_set_cube_name(from._internal_cube_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service_name(from._internal_service_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ingress_code(from._internal_ingress_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_egress_code(from._internal_egress_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_loglevel(from._internal_loglevel());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_conf(from._internal_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      uuid_ = from.uuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      service_type_ = from.service_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CubeManagement::CopyFrom(const CubeManagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.CubeManagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CubeManagement::IsInitialized() const {
  return true;
}

void CubeManagement::InternalSwap(CubeManagement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cube_name_, lhs_arena,
      &other->cube_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ingress_code_, lhs_arena,
      &other->ingress_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &egress_code_, lhs_arena,
      &other->egress_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loglevel_, lhs_arena,
      &other->loglevel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &conf_, lhs_arena,
      &other->conf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CubeManagement, service_type_)
      + sizeof(CubeManagement::service_type_)
      - PROTOBUF_FIELD_OFFSET(CubeManagement, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CubeManagement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[12]);
}

// ===================================================================

class Port::_Internal {
 public:
  using HasBits = decltype(std::declval<Port>()._has_bits_);
  static void set_has_peer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Port::Port(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.Port)
}
Port::Port(const Port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    peer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_peer()) {
    peer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_peer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_status_, &from.port_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_type_) -
    reinterpret_cast<char*>(&port_status_)) + sizeof(port_type_));
  // @@protoc_insertion_point(copy_constructor:commons.Port)
}

inline void Port::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  peer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_type_) -
    reinterpret_cast<char*>(&port_status_)) + sizeof(port_type_));
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:commons.Port)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Port::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  peer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Port::ArenaDtor(void* object) {
  Port* _this = reinterpret_cast< Port* >(object);
  (void)_this;
}
void Port::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Port::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.Port)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    peer_.ClearNonDefaultToEmpty();
  }
  ::memset(&port_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_type_) -
      reinterpret_cast<char*>(&port_status_)) + sizeof(port_type_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.Port.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_peer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.Port.peer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.Port.PortStatus port_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port_status(static_cast<::commons::Port_PortStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .commons.Port.PortType port_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port_type(static_cast<::commons::Port_PortType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Port::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.Port)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.Port.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string peer = 2;
  if (_internal_has_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer().data(), static_cast<int>(this->_internal_peer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.Port.peer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_peer(), target);
  }

  // .commons.Port.PortStatus port_status = 3;
  if (this->_internal_port_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_port_status(), target);
  }

  // .commons.Port.PortType port_type = 4;
  if (this->_internal_port_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_port_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.Port)
  return target;
}

size_t Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.Port)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional string peer = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer());
  }

  // .commons.Port.PortStatus port_status = 3;
  if (this->_internal_port_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port_status());
  }

  // .commons.Port.PortType port_type = 4;
  if (this->_internal_port_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Port::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Port::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Port::GetClassData() const { return &_class_data_; }

void Port::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Port *>(to)->MergeFrom(
      static_cast<const Port &>(from));
}


void Port::MergeFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.Port)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_peer()) {
    _internal_set_peer(from._internal_peer());
  }
  if (from._internal_port_status() != 0) {
    _internal_set_port_status(from._internal_port_status());
  }
  if (from._internal_port_type() != 0) {
    _internal_set_port_type(from._internal_port_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Port::CopyFrom(const Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  return true;
}

void Port::InternalSwap(Port* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &peer_, lhs_arena,
      &other->peer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Port, port_type_)
      + sizeof(Port::port_type_)
      - PROTOBUF_FIELD_OFFSET(Port, port_status_)>(
          reinterpret_cast<char*>(&port_status_),
          reinterpret_cast<char*>(&other->port_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Port::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[13]);
}

// ===================================================================

class MapValue::_Internal {
 public:
  using HasBits = decltype(std::declval<MapValue>()._has_bits_);
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MapValue::MapValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.MapValue)
}
MapValue::MapValue(const MapValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bytevalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytevalues_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytevalues().empty()) {
    bytevalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytevalues(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  key_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_desc().empty()) {
    key_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_desc(), 
      GetArenaForAllocation());
  }
  leaf_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    leaf_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leaf_desc().empty()) {
    leaf_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_leaf_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&key_size_, &from.key_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(counter_));
  // @@protoc_insertion_point(copy_constructor:commons.MapValue)
}

inline void MapValue::SharedCtor() {
bytevalues_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytevalues_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
leaf_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  leaf_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(counter_));
}

MapValue::~MapValue() {
  // @@protoc_insertion_point(destructor:commons.MapValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bytevalues_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaf_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapValue::ArenaDtor(void* object) {
  MapValue* _this = reinterpret_cast< MapValue* >(object);
  (void)_this;
}
void MapValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapValue::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.MapValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytevalues_.ClearToEmpty();
  name_.ClearToEmpty();
  key_desc_.ClearToEmpty();
  leaf_desc_.ClearToEmpty();
  ::memset(&key_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_entries_) -
      reinterpret_cast<char*>(&key_size_)) + sizeof(max_entries_));
  counter_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes byteValues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bytevalues();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.MapValue.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 key_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          key_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leaf_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          leaf_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          max_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_key_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.MapValue.key_desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leaf_desc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_leaf_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.MapValue.leaf_desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 counter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_counter(&has_bits);
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.MapValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes byteValues = 1;
  if (!this->_internal_bytevalues().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_bytevalues(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.MapValue.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // uint64 key_size = 4;
  if (this->_internal_key_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_key_size(), target);
  }

  // uint64 leaf_size = 5;
  if (this->_internal_leaf_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_leaf_size(), target);
  }

  // uint64 max_entries = 6;
  if (this->_internal_max_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_max_entries(), target);
  }

  // int32 flags = 7;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_flags(), target);
  }

  // string key_desc = 8;
  if (!this->_internal_key_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_desc().data(), static_cast<int>(this->_internal_key_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.MapValue.key_desc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_key_desc(), target);
  }

  // string leaf_desc = 9;
  if (!this->_internal_leaf_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leaf_desc().data(), static_cast<int>(this->_internal_leaf_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.MapValue.leaf_desc");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_leaf_desc(), target);
  }

  // optional int32 counter = 10;
  if (_internal_has_counter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.MapValue)
  return target;
}

size_t MapValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.MapValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes byteValues = 1;
  if (!this->_internal_bytevalues().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytevalues());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string key_desc = 8;
  if (!this->_internal_key_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_desc());
  }

  // string leaf_desc = 9;
  if (!this->_internal_leaf_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaf_desc());
  }

  // uint64 key_size = 4;
  if (this->_internal_key_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_key_size());
  }

  // uint64 leaf_size = 5;
  if (this->_internal_leaf_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_leaf_size());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 flags = 7;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  // uint64 max_entries = 6;
  if (this->_internal_max_entries() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_max_entries());
  }

  // optional int32 counter = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapValue::GetClassData() const { return &_class_data_; }

void MapValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapValue *>(to)->MergeFrom(
      static_cast<const MapValue &>(from));
}


void MapValue::MergeFrom(const MapValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.MapValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytevalues().empty()) {
    _internal_set_bytevalues(from._internal_bytevalues());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_key_desc().empty()) {
    _internal_set_key_desc(from._internal_key_desc());
  }
  if (!from._internal_leaf_desc().empty()) {
    _internal_set_leaf_desc(from._internal_leaf_desc());
  }
  if (from._internal_key_size() != 0) {
    _internal_set_key_size(from._internal_key_size());
  }
  if (from._internal_leaf_size() != 0) {
    _internal_set_leaf_size(from._internal_leaf_size());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_max_entries() != 0) {
    _internal_set_max_entries(from._internal_max_entries());
  }
  if (from._internal_has_counter()) {
    _internal_set_counter(from._internal_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapValue::CopyFrom(const MapValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.MapValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapValue::IsInitialized() const {
  return true;
}

void MapValue::InternalSwap(MapValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytevalues_, lhs_arena,
      &other->bytevalues_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_desc_, lhs_arena,
      &other->key_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &leaf_desc_, lhs_arena,
      &other->leaf_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapValue, counter_)
      + sizeof(MapValue::counter_)
      - PROTOBUF_FIELD_OFFSET(MapValue, key_size_)>(
          reinterpret_cast<char*>(&key_size_),
          reinterpret_cast<char*>(&other->key_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[14]);
}

// ===================================================================

class SetRequest::_Internal {
 public:
};

SetRequest::SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.SetRequest)
}
SetRequest::SetRequest(const SetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&key_size_, &from.key_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_size_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(value_size_));
  // @@protoc_insertion_point(copy_constructor:commons.SetRequest)
}

inline void SetRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_size_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(value_size_));
}

SetRequest::~SetRequest() {
  // @@protoc_insertion_point(destructor:commons.SetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetRequest::ArenaDtor(void* object) {
  SetRequest* _this = reinterpret_cast< SetRequest* >(object);
  (void)_this;
}
void SetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.SetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&key_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_size_) -
      reinterpret_cast<char*>(&key_size_)) + sizeof(value_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 key_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          key_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          value_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.SetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // uint64 key_size = 2;
  if (this->_internal_key_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_size(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // uint64 value_size = 4;
  if (this->_internal_value_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_value_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.SetRequest)
  return target;
}

size_t SetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.SetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint64 key_size = 2;
  if (this->_internal_key_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_key_size());
  }

  // uint64 value_size = 4;
  if (this->_internal_value_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRequest::GetClassData() const { return &_class_data_; }

void SetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetRequest *>(to)->MergeFrom(
      static_cast<const SetRequest &>(from));
}


void SetRequest::MergeFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_key_size() != 0) {
    _internal_set_key_size(from._internal_key_size());
  }
  if (from._internal_value_size() != 0) {
    _internal_set_value_size(from._internal_value_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRequest::CopyFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRequest::IsInitialized() const {
  return true;
}

void SetRequest::InternalSwap(SetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRequest, value_size_)
      + sizeof(SetRequest::value_size_)
      - PROTOBUF_FIELD_OFFSET(SetRequest, key_size_)>(
          reinterpret_cast<char*>(&key_size_),
          reinterpret_cast<char*>(&other->key_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[15]);
}

// ===================================================================

class GetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRequest>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&key_size_, &from.key_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(all_));
  // @@protoc_insertion_point(copy_constructor:commons.GetRequest)
}

inline void GetRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(all_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:commons.GetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRequest::ArenaDtor(void* object) {
  GetRequest* _this = reinterpret_cast< GetRequest* >(object);
  (void)_this;
}
void GetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.GetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  ::memset(&key_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&key_size_)) + sizeof(all_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool all = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 key_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          key_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          value_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.GetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all = 1;
  if (this->_internal_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all(), target);
  }

  // optional bytes key = 2;
  if (_internal_has_key()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // uint64 key_size = 3;
  if (this->_internal_key_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_key_size(), target);
  }

  // uint64 value_size = 4;
  if (this->_internal_value_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_value_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.GetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes key = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint64 key_size = 3;
  if (this->_internal_key_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_key_size());
  }

  // uint64 value_size = 4;
  if (this->_internal_value_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value_size());
  }

  // bool all = 1;
  if (this->_internal_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }

void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRequest *>(to)->MergeFrom(
      static_cast<const GetRequest &>(from));
}


void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_key_size() != 0) {
    _internal_set_key_size(from._internal_key_size());
  }
  if (from._internal_value_size() != 0) {
    _internal_set_value_size(from._internal_value_size());
  }
  if (from._internal_all() != 0) {
    _internal_set_all(from._internal_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRequest, all_)
      + sizeof(GetRequest::all_)
      - PROTOBUF_FIELD_OFFSET(GetRequest, key_size_)>(
          reinterpret_cast<char*>(&key_size_),
          reinterpret_cast<char*>(&other->key_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[16]);
}

// ===================================================================

class RemoveRequest::_Internal {
 public:
};

RemoveRequest::RemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.RemoveRequest)
}
RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&key_size_, &from.key_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(all_));
  // @@protoc_insertion_point(copy_constructor:commons.RemoveRequest)
}

inline void RemoveRequest::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&all_) -
    reinterpret_cast<char*>(&key_size_)) + sizeof(all_));
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:commons.RemoveRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveRequest::ArenaDtor(void* object) {
  RemoveRequest* _this = reinterpret_cast< RemoveRequest* >(object);
  (void)_this;
}
void RemoveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.RemoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  ::memset(&key_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&all_) -
      reinterpret_cast<char*>(&key_size_)) + sizeof(all_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool all = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 key_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          key_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.RemoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all = 1;
  if (this->_internal_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // uint64 key_size = 3;
  if (this->_internal_key_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_key_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.RemoveRequest)
  return target;
}

size_t RemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.RemoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint64 key_size = 3;
  if (this->_internal_key_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_key_size());
  }

  // bool all = 1;
  if (this->_internal_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveRequest::GetClassData() const { return &_class_data_; }

void RemoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveRequest *>(to)->MergeFrom(
      static_cast<const RemoveRequest &>(from));
}


void RemoveRequest::MergeFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.RemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_key_size() != 0) {
    _internal_set_key_size(from._internal_key_size());
  }
  if (from._internal_all() != 0) {
    _internal_set_all(from._internal_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.RemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::InternalSwap(RemoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveRequest, all_)
      + sizeof(RemoveRequest::all_)
      - PROTOBUF_FIELD_OFFSET(RemoveRequest, key_size_)>(
          reinterpret_cast<char*>(&key_size_),
          reinterpret_cast<char*>(&other->key_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[17]);
}

// ===================================================================

class Index::_Internal {
 public:
};

Index::Index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.Index)
}
Index::Index(const Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:commons.Index)
}

inline void Index::SharedCtor() {
index_ = 0;
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:commons.Index)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Index::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Index::ArenaDtor(void* object) {
  Index* _this = reinterpret_cast< Index* >(object);
  (void)_this;
}
void Index::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.Index)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Index::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Index::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.Index)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.Index)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Index::GetClassData() const { return &_class_data_; }

void Index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Index *>(to)->MergeFrom(
      static_cast<const Index &>(from));
}


void Index::MergeFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.Index)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::InternalSwap(Index* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Index::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[18]);
}

// ===================================================================

class Dataplane::_Internal {
 public:
  using HasBits = decltype(std::declval<Dataplane>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Dataplane::Dataplane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:commons.Dataplane)
}
Dataplane::Dataplane(const Dataplane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cube_name().empty()) {
    cube_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cube_name(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&program_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(program_type_));
  // @@protoc_insertion_point(copy_constructor:commons.Dataplane)
}

inline void Dataplane::SharedCtor() {
cube_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cube_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&program_type_) -
    reinterpret_cast<char*>(&index_)) + sizeof(program_type_));
}

Dataplane::~Dataplane() {
  // @@protoc_insertion_point(destructor:commons.Dataplane)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dataplane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cube_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Dataplane::ArenaDtor(void* object) {
  Dataplane* _this = reinterpret_cast< Dataplane* >(object);
  (void)_this;
}
void Dataplane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dataplane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dataplane::Clear() {
// @@protoc_insertion_point(message_clear_start:commons.Dataplane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cube_name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmpty();
  }
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&program_type_) -
      reinterpret_cast<char*>(&index_)) + sizeof(program_type_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dataplane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cube_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cube_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.Dataplane.cube_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "commons.Dataplane.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .commons.Dataplane.ProgramType program_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_program_type(static_cast<::commons::Dataplane_ProgramType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dataplane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:commons.Dataplane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cube_name = 1;
  if (!this->_internal_cube_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cube_name().data(), static_cast<int>(this->_internal_cube_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.Dataplane.cube_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cube_name(), target);
  }

  // optional string code = 2;
  if (_internal_has_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "commons.Dataplane.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // .commons.Dataplane.ProgramType program_type = 4;
  if (this->_internal_program_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_program_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:commons.Dataplane)
  return target;
}

size_t Dataplane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:commons.Dataplane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cube_name = 1;
  if (!this->_internal_cube_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cube_name());
  }

  // optional string code = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // .commons.Dataplane.ProgramType program_type = 4;
  if (this->_internal_program_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_program_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dataplane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dataplane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dataplane::GetClassData() const { return &_class_data_; }

void Dataplane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dataplane *>(to)->MergeFrom(
      static_cast<const Dataplane &>(from));
}


void Dataplane::MergeFrom(const Dataplane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:commons.Dataplane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cube_name().empty()) {
    _internal_set_cube_name(from._internal_cube_name());
  }
  if (from._internal_has_code()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_program_type() != 0) {
    _internal_set_program_type(from._internal_program_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dataplane::CopyFrom(const Dataplane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:commons.Dataplane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataplane::IsInitialized() const {
  return true;
}

void Dataplane::InternalSwap(Dataplane* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cube_name_, lhs_arena,
      &other->cube_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dataplane, program_type_)
      + sizeof(Dataplane::program_type_)
      - PROTOBUF_FIELD_OFFSET(Dataplane, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dataplane::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_getter, &descriptor_table_polycube_5fgrpc_5fcommons_2eproto_once,
      file_level_metadata_polycube_5fgrpc_5fcommons_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace commons
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::commons::Empty* Arena::CreateMaybeMessage< ::commons::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::Bool* Arena::CreateMaybeMessage< ::commons::Bool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::Bool >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::ServicedInfo* Arena::CreateMaybeMessage< ::commons::ServicedInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::ServicedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::ToServiced* Arena::CreateMaybeMessage< ::commons::ToServiced >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::ToServiced >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::RestUserToServicedRequest* Arena::CreateMaybeMessage< ::commons::RestUserToServicedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::RestUserToServicedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::DataplaneToServicedRequest* Arena::CreateMaybeMessage< ::commons::DataplaneToServicedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::DataplaneToServicedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::DataplaneToServicedPacket* Arena::CreateMaybeMessage< ::commons::DataplaneToServicedPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::DataplaneToServicedPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::ToPolycubed* Arena::CreateMaybeMessage< ::commons::ToPolycubed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::ToPolycubed >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::ServicedToDataplaneReply* Arena::CreateMaybeMessage< ::commons::ServicedToDataplaneReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::ServicedToDataplaneReply >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::ServicedToRestUserReply* Arena::CreateMaybeMessage< ::commons::ServicedToRestUserReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::ServicedToRestUserReply >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::ServicedToDataplaneRequest* Arena::CreateMaybeMessage< ::commons::ServicedToDataplaneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::ServicedToDataplaneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::CubeInfo* Arena::CreateMaybeMessage< ::commons::CubeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::CubeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::CubeManagement* Arena::CreateMaybeMessage< ::commons::CubeManagement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::CubeManagement >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::Port* Arena::CreateMaybeMessage< ::commons::Port >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::Port >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::MapValue* Arena::CreateMaybeMessage< ::commons::MapValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::MapValue >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::SetRequest* Arena::CreateMaybeMessage< ::commons::SetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::SetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::GetRequest* Arena::CreateMaybeMessage< ::commons::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::RemoveRequest* Arena::CreateMaybeMessage< ::commons::RemoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::RemoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::Index* Arena::CreateMaybeMessage< ::commons::Index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::Index >(arena);
}
template<> PROTOBUF_NOINLINE ::commons::Dataplane* Arena::CreateMaybeMessage< ::commons::Dataplane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::commons::Dataplane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
